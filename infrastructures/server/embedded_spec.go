// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Payments Service API, internal to Thermeon",
    "title": "Payments Service API",
    "termsOfService": "http://thermeon.com/terms.html",
    "contact": {
      "name": "Technical Team",
      "url": "https://www.github.com/thermeon/payments-service/issues",
      "email": "devel@thermeon.com"
    },
    "license": {
      "name": "Copyright 2017 Thermeon Worldwide"
    },
    "version": "1.0.0"
  },
  "basePath": "/v0",
  "paths": {
    "/card/option": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Request that a card be processed and tokenized",
        "operationId": "ChooseOption",
        "parameters": [
          {
            "$ref": "#/parameters/RequestOption"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/card/tokenize": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Request that a card be processed and tokenized",
        "operationId": "TokenizeCard",
        "parameters": [
          {
            "$ref": "#/parameters/RequestTokenize"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lane": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:lane"
            ]
          }
        ],
        "description": "Create a new Lane for a physical device",
        "operationId": "CreateLane",
        "parameters": [
          {
            "$ref": "#/parameters/RequestCreateLane"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lane/{processor}/{lane_id}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Retrieve a configured lane",
        "operationId": "GetLane",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Lane ID",
            "name": "lane_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Lane retrieved",
            "schema": {
              "$ref": "#/definitions/Lane"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Delete a configured lane",
        "operationId": "DeleteLane",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Lane ID",
            "name": "lane_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Lane deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lanes/{processor}/{location}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Retrieve collection of all configured lanes",
        "operationId": "GetLanes",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Location",
            "name": "location",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Lanes retrieved",
            "schema": {
              "$ref": "#/definitions/Lanes"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/auth": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests AUTH for a specified amount, if txnRef is present this will be incremental",
        "operationId": "AuthorizationTransaction",
        "parameters": [
          {
            "$ref": "#/parameters/RequestCreate"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/capture": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior authorisation be CAPTUREd for a specified amount, this may be up to the value of the AUTH",
        "operationId": "CaptureTransaction",
        "parameters": [
          {
            "$ref": "#/parameters/RequestModify"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/refund": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior CAPTURE be REFUNDed for a specified amount, this may be up to the value of the CAPTURE",
        "operationId": "RefundTransaction",
        "parameters": [
          {
            "$ref": "#/parameters/RequestCreate"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/sale": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "AUTH and CAPTURE in a single operation",
        "operationId": "SaleTransaction",
        "parameters": [
          {
            "$ref": "#/parameters/RequestCreate"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/void": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior authorisation be VOID for a specified amount, this may be up to the value of the AUTH",
        "operationId": "VoidTransaction",
        "parameters": [
          {
            "$ref": "#/parameters/RequestModify"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/{transaction_id}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:transaction"
            ]
          }
        ],
        "description": "Returns the transaction matching the transaction_id",
        "operationId": "RetrieveTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction found and retrieved",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Aborts transaction matching the transaction_id as long as it is not yet complete",
        "operationId": "AbortTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Not allowed"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/{transaction_id}/history": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:transaction"
            ]
          }
        ],
        "description": "Returns the history of the transaction matching the transaction_id",
        "operationId": "RetrieveTransactionHistory",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction found and retrieved",
            "schema": {
              "$ref": "#/definitions/TransactionHistory"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdjustmentData": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "code": {
          "description": "Adjustment code",
          "type": "string"
        },
        "detail": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Amount": {
      "description": "A monetary amount",
      "type": "number",
      "format": "float",
      "exclusiveMinimum": true,
      "example": 12.34
    },
    "AuthCode": {
      "description": "Authorization response code as returned by the issuing bank",
      "type": "string",
      "maxLength": 30,
      "minLength": 1,
      "example": "987012"
    },
    "Authorized": {
      "description": "Authorization from the bank approved",
      "type": "boolean",
      "example": true
    },
    "CCCvc": {
      "description": "Credit card verification code",
      "type": "string",
      "maxLength": 4,
      "minLength": 3,
      "example": "432"
    },
    "CCCvcPresence": {
      "description": "Declaration of CVC presence:\n  * 0: Merchant chose not to submit\n  * 1: Merchant has included CVC\n  * 2: Card holder states CVC illegible\n  * 9: Card holder states CVC not present\n",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        9
      ]
    },
    "CCCvcResultCode": {
      "description": "Issuer CVC check response code:\n  * D - Transaction determined suspicious by issuing bank.\n  * I - Card verification number failed processor's data validation check.\n  * M - Card verification number matched.\n  * N - Card verification number not matched.\n  * P - Card verification number not processed by processor for unspecified reason.\n  * S - Card verification number is on the card but was not included in the request.\n  * U - Card verification is not supported by the issuing bank.\n  * X - Card verification is not supported by the card association.\n  * 1 - Card verification is not supported for this processor or card type.\n  * 2 - Unrecognized result code returned by processor for card verification response.\n  * 3 - No result code returned by processor.\n",
      "type": "string",
      "enum": [
        "D",
        "I",
        "M",
        "N",
        "P",
        "S",
        "U",
        "X",
        "1",
        "2",
        "3"
      ]
    },
    "CCExpire": {
      "description": "Credit card expiry date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "CCHolderName": {
      "description": "Cardholder name",
      "type": "string",
      "maxLength": 40,
      "minLength": 1,
      "example": "N E BODY"
    },
    "CCIssue": {
      "description": "Credit card issue number",
      "type": "integer",
      "maximum": 99,
      "minimum": 1,
      "example": 1
    },
    "CCNumber": {
      "description": "Primary Account Number (will be sanitised in all output)",
      "type": "string",
      "maxLength": 40,
      "minLength": 14,
      "example": "4111 1111 1111 1111"
    },
    "CCStart": {
      "description": "Credit card start date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "CCType": {
      "description": "Card type",
      "type": "string",
      "maxLength": 20,
      "example": "Visa"
    },
    "Choice": {
      "type": "object",
      "required": [
        "location",
        "deviceId",
        "posId"
      ],
      "properties": {
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "option": {
          "$ref": "#/definitions/Option"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "ConversionRate": {
      "description": "Currency transformation ration between currency and dccCurrency",
      "type": "number",
      "format": "float",
      "exclusiveMinimum": true,
      "example": 0.892
    },
    "Create": {
      "type": "object",
      "required": [
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rebillToken": {
          "$ref": "#/definitions/RebillToken"
        },
        "rentalDetail": {
          "$ref": "#/definitions/RentalDetail"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "Currency": {
      "description": "ISO 4217 currency code",
      "type": "string",
      "maxLength": 4,
      "minLength": 3,
      "example": "GBP"
    },
    "DeviceActivationCode": {
      "description": "Activation code for the EFTPOS device",
      "type": "string",
      "example": "X123456"
    },
    "DeviceDescription": {
      "description": "EFTPOS device description",
      "type": "string",
      "example": "Main device for location AB123"
    },
    "DeviceId": {
      "description": "EFTPOS device ID",
      "type": "string",
      "maxLength": 32,
      "example": "DX01234124-1241240-1231"
    },
    "DeviceIdleMessage": {
      "description": "EFTPOS message to display while idle",
      "type": "string",
      "example": "Honest John Car Rental"
    },
    "DeviceModel": {
      "description": "EFTPOS device model number",
      "type": "string",
      "example": "MX 915"
    },
    "DeviceSerial": {
      "description": "EFTPOS device serial number",
      "type": "string",
      "example": "123-456-789"
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "eventId": {
          "$ref": "#/definitions/EventID"
        },
        "meta": {
          "type": "string"
        },
        "stamp": {
          "$ref": "#/definitions/TxnDate"
        }
      }
    },
    "EventID": {
      "description": "Transaction event reference (internal)",
      "type": "string",
      "format": "uuid",
      "example": "0173c58c-f772-41b8-bdd9-3c150abe2356"
    },
    "HelpText": {
      "description": "A more detailed explanation of the response from the bank",
      "type": "string",
      "maxLength": 64,
      "example": "The Transaction was approved"
    },
    "Lane": {
      "type": "object",
      "properties": {
        "deviceDescription": {
          "$ref": "#/definitions/DeviceDescription"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "deviceIdleMessage": {
          "$ref": "#/definitions/DeviceIdleMessage"
        },
        "deviceModel": {
          "$ref": "#/definitions/DeviceModel"
        },
        "deviceSerial": {
          "$ref": "#/definitions/DeviceSerial"
        },
        "laneId": {
          "$ref": "#/definitions/LaneId"
        },
        "processor": {
          "$ref": "#/definitions/TxnProcessor"
        }
      }
    },
    "LaneId": {
      "description": "Lane identifier \u003clocation\u003e-\u003cindex\u003e",
      "type": "string",
      "example": "ABC31-2"
    },
    "LaneRequest": {
      "type": "object",
      "properties": {
        "activationCode": {
          "$ref": "#/definitions/DeviceActivationCode"
        },
        "deviceDescription": {
          "$ref": "#/definitions/DeviceDescription"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "laneId": {
          "$ref": "#/definitions/LaneId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "processor": {
          "$ref": "#/definitions/TxnProcessor"
        }
      }
    },
    "Lanes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Lane"
      }
    },
    "Location": {
      "description": "Location of the client branch of the rental",
      "type": "string",
      "maxLength": 32,
      "example": "GBR-RAC-0123"
    },
    "MerchantName": {
      "description": "Merchant name",
      "type": "string",
      "maxLength": 64,
      "example": "thermeon"
    },
    "MerchantNumber": {
      "description": "Merchant number",
      "type": "integer",
      "example": 12345678
    },
    "MerchantRef": {
      "description": "Merchant transaction reference",
      "type": "string",
      "maxLength": 64,
      "example": "Q032545"
    },
    "MerchantRefType": {
      "description": "Merchant transaction type",
      "type": "string",
      "maxLength": 16,
      "example": "RES"
    },
    "MerchantUser": {
      "description": "Merchant username",
      "type": "string",
      "maxLength": 16,
      "example": "bob34"
    },
    "Modify": {
      "type": "object",
      "required": [
        "txnRef",
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rentalDetail": {
          "$ref": "#/definitions/RentalDetail"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "Option": {
      "description": "Approval option text",
      "type": "object",
      "properties": {
        "name": {
          "description": "Option name",
          "type": "string",
          "example": "B1"
        },
        "value": {
          "description": "Option value",
          "type": "string",
          "example": "YES"
        }
      }
    },
    "OptionLine": {
      "description": "Option description line",
      "type": "string"
    },
    "POSId": {
      "description": "Point of Sale device ID",
      "type": "string",
      "maxLength": 32,
      "example": "TEL-00"
    },
    "PickupData": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "date": {
          "description": "pickup date, notation as per RFC 3339",
          "type": "string",
          "format": "date-time",
          "x-nullable": false,
          "example": "2017-07-21T15:04:05Z"
        },
        "location": {
          "description": "store location code",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "RebillToken": {
      "description": "Tokenized PAN provided by service providers, along with adapter name",
      "type": "string",
      "maxLength": 128,
      "example": "iveri|20E5E52BA01B5285CBC13D435EC788C6BD875FE434E2B075A2C32F8EE8CA5688AD"
    },
    "ReceiptText": {
      "description": "Receipt text, if this is populated without being Complete then it requires approval",
      "type": "string",
      "example": "Thermeon                   Vantage House              Mid Street                                            *---------EFTPOS----------*MERCHANT          123456789TERMINAL           1234567826 Jul 19 14:32            MASTERCARD            SWIPECARD       ************1114AUTHORISATION        002830REFERENCE            000812AUTH              GBP123.45TOTAL             GBP123.45                                   AUTHORISED                                         PLEASE SIGN BELOW                                                                                                                 *-------------------------*       MERCHANT COPY                                         PLEASE RETAIN            FOR YOUR RECORDS"
    },
    "ReceiptWidth": {
      "description": "Width of receipt lines, used to format ReceiptText for printing",
      "type": "integer",
      "example": 80
    },
    "RentalDetail": {
      "type": "object",
      "properties": {
        "adjustmentData": {
          "$ref": "#/definitions/AdjustmentData"
        },
        "customerName": {
          "type": "string"
        },
        "dailyRate": {
          "$ref": "#/definitions/Amount"
        },
        "duration": {
          "description": "Whole number of days for the rental",
          "type": "integer",
          "exclusiveMinimum": true
        },
        "insuranceCharges": {
          "$ref": "#/definitions/Amount"
        },
        "noShowIndicator": {
          "type": "string"
        },
        "pickupData": {
          "$ref": "#/definitions/PickupData"
        },
        "raNumber": {
          "type": "string"
        },
        "returnData": {
          "$ref": "#/definitions/ReturnData"
        },
        "vehicleClassCode": {
          "type": "string"
        },
        "weeklyRate": {
          "$ref": "#/definitions/Amount"
        }
      }
    },
    "ResponseCode": {
      "description": "Response code",
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "example": "00"
    },
    "ResponseText": {
      "description": "Response code description",
      "type": "string",
      "maxLength": 64,
      "example": "APPROVED"
    },
    "ReturnData": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "date": {
          "description": "pickup date, notation as per RFC 3339",
          "type": "string",
          "format": "date-time",
          "x-nullable": false,
          "example": "2017-07-21T15:04:05Z"
        },
        "distance": {
          "description": "whole units travelled",
          "type": "integer",
          "x-nullable": false
        },
        "distanceUnit": {
          "description": "Unit used for ` + "`" + `distance` + "`" + `:\n  * m - miles\n  * km - kilometres\n",
          "type": "string",
          "enum": [
            "m",
            "km"
          ]
        },
        "location": {
          "description": "store location code",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "SettleDate": {
      "description": "Expected date of settlement, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "Tokenize": {
      "type": "object",
      "required": [
        "location",
        "deviceId",
        "posId"
      ],
      "properties": {
        "ccCvc": {
          "$ref": "#/definitions/CCCvc"
        },
        "ccCvcPresence": {
          "$ref": "#/definitions/CCCvcPresence"
        },
        "ccExpire": {
          "$ref": "#/definitions/CCExpire"
        },
        "ccHolderName": {
          "$ref": "#/definitions/CCHolderName"
        },
        "ccIssue": {
          "$ref": "#/definitions/CCIssue"
        },
        "ccNumber": {
          "$ref": "#/definitions/CCNumber"
        },
        "ccStart": {
          "$ref": "#/definitions/CCStart"
        },
        "ccType": {
          "$ref": "#/definitions/CCType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "txnRef",
        "txnType",
        "txnComplete",
        "txnProcessor",
        "txnDate",
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "authCode": {
          "$ref": "#/definitions/AuthCode"
        },
        "authorized": {
          "$ref": "#/definitions/Authorized"
        },
        "ccCvc": {
          "$ref": "#/definitions/CCCvc"
        },
        "ccCvcPresence": {
          "$ref": "#/definitions/CCCvcPresence"
        },
        "ccCvcResCode": {
          "$ref": "#/definitions/CCCvcResultCode"
        },
        "ccExpire": {
          "$ref": "#/definitions/CCExpire"
        },
        "ccHolderName": {
          "$ref": "#/definitions/CCHolderName"
        },
        "ccIssue": {
          "$ref": "#/definitions/CCIssue"
        },
        "ccNumber": {
          "$ref": "#/definitions/CCNumber"
        },
        "ccStart": {
          "$ref": "#/definitions/CCStart"
        },
        "ccType": {
          "$ref": "#/definitions/CCType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "dccAmount": {
          "$ref": "#/definitions/Amount"
        },
        "dccCommission": {
          "$ref": "#/definitions/Amount"
        },
        "dccConversionRate": {
          "$ref": "#/definitions/ConversionRate"
        },
        "dccCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "dccMarkup": {
          "$ref": "#/definitions/Amount"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "helpText": {
          "$ref": "#/definitions/HelpText"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "optLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionLine"
          }
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rebillToken": {
          "$ref": "#/definitions/RebillToken"
        },
        "receiptText": {
          "$ref": "#/definitions/ReceiptText"
        },
        "receiptWidth": {
          "$ref": "#/definitions/ReceiptWidth"
        },
        "respCode": {
          "$ref": "#/definitions/ResponseCode"
        },
        "respText": {
          "$ref": "#/definitions/ResponseText"
        },
        "settleDate": {
          "$ref": "#/definitions/SettleDate"
        },
        "txnComplete": {
          "$ref": "#/definitions/TxnComplete"
        },
        "txnDate": {
          "$ref": "#/definitions/TxnDate"
        },
        "txnProcessor": {
          "$ref": "#/definitions/TxnProcessor"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnRefExt": {
          "$ref": "#/definitions/TxnReferenceExternal"
        },
        "txnRefParent": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnType": {
          "$ref": "#/definitions/TxnType"
        }
      }
    },
    "TransactionHistory": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "txnHistory": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnRefParent": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnType": {
          "$ref": "#/definitions/TxnType"
        }
      }
    },
    "TxnComplete": {
      "description": "Transaction is complete",
      "type": "boolean",
      "example": true
    },
    "TxnDate": {
      "description": "Transaction date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date-time",
      "x-nullable": true,
      "example": "2017-07-21T15:04:05Z"
    },
    "TxnProcessor": {
      "description": "Transaction processor",
      "type": "string",
      "maxLength": 32,
      "example": "Payment Express"
    },
    "TxnReference": {
      "description": "Transaction reference (internal)",
      "type": "string",
      "format": "uuid",
      "example": "0173c58c-f772-41b8-bdd9-3c150abe2356"
    },
    "TxnReferenceExternal": {
      "description": "Transaction reference (external)",
      "type": "string",
      "maxLength": 40,
      "example": "292732.287654448218"
    },
    "TxnType": {
      "description": "Transaction type",
      "type": "string",
      "enum": [
        "auth",
        "capture",
        "refund",
        "sale",
        "void"
      ]
    }
  },
  "parameters": {
    "RequestCreate": {
      "name": "RequestCreate",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Create"
      }
    },
    "RequestCreateLane": {
      "name": "RequestCreateLane",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/LaneRequest"
      }
    },
    "RequestModify": {
      "name": "RequestModify",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Modify"
      }
    },
    "RequestOption": {
      "name": "RequestOption",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Choice"
      }
    },
    "RequestTokenize": {
      "name": "RequestTokenize",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Tokenize"
      }
    }
  },
  "securityDefinitions": {
    "payments_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://auth.thermeon.io/oauth/dialog",
      "scopes": {
        "read:lane": "read transaction record",
        "read:transaction": "read transaction record",
        "write:lane": "write a transaction",
        "write:transaction": "write a transaction"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Payments Service API, internal to Thermeon",
    "title": "Payments Service API",
    "termsOfService": "http://thermeon.com/terms.html",
    "contact": {
      "name": "Technical Team",
      "url": "https://www.github.com/thermeon/payments-service/issues",
      "email": "devel@thermeon.com"
    },
    "license": {
      "name": "Copyright 2017 Thermeon Worldwide"
    },
    "version": "1.0.0"
  },
  "basePath": "/v0",
  "paths": {
    "/card/option": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Request that a card be processed and tokenized",
        "operationId": "ChooseOption",
        "parameters": [
          {
            "name": "RequestOption",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Choice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/card/tokenize": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Request that a card be processed and tokenized",
        "operationId": "TokenizeCard",
        "parameters": [
          {
            "name": "RequestTokenize",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tokenize"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lane": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:lane"
            ]
          }
        ],
        "description": "Create a new Lane for a physical device",
        "operationId": "CreateLane",
        "parameters": [
          {
            "name": "RequestCreateLane",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LaneRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lane/{processor}/{lane_id}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Retrieve a configured lane",
        "operationId": "GetLane",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Lane ID",
            "name": "lane_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Lane retrieved",
            "schema": {
              "$ref": "#/definitions/Lane"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Delete a configured lane",
        "operationId": "DeleteLane",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Lane ID",
            "name": "lane_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Lane deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/lanes/{processor}/{location}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:lane"
            ]
          }
        ],
        "description": "Retrieve collection of all configured lanes",
        "operationId": "GetLanes",
        "parameters": [
          {
            "type": "string",
            "description": "Payment Processor",
            "name": "processor",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Location",
            "name": "location",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Lanes retrieved",
            "schema": {
              "$ref": "#/definitions/Lanes"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/auth": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests AUTH for a specified amount, if txnRef is present this will be incremental",
        "operationId": "AuthorizationTransaction",
        "parameters": [
          {
            "name": "RequestCreate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/capture": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior authorisation be CAPTUREd for a specified amount, this may be up to the value of the AUTH",
        "operationId": "CaptureTransaction",
        "parameters": [
          {
            "name": "RequestModify",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Modify"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/refund": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior CAPTURE be REFUNDed for a specified amount, this may be up to the value of the CAPTURE",
        "operationId": "RefundTransaction",
        "parameters": [
          {
            "name": "RequestCreate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/sale": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "AUTH and CAPTURE in a single operation",
        "operationId": "SaleTransaction",
        "parameters": [
          {
            "name": "RequestCreate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/void": {
      "post": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Requests prior authorisation be VOID for a specified amount, this may be up to the value of the AUTH",
        "operationId": "VoidTransaction",
        "parameters": [
          {
            "name": "RequestModify",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Modify"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "headers": {
              "location": {
                "type": "string",
                "description": "location of the created resource"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/{transaction_id}": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:transaction"
            ]
          }
        ],
        "description": "Returns the transaction matching the transaction_id",
        "operationId": "RetrieveTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction found and retrieved",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "payments_auth": [
              "write:transaction"
            ]
          }
        ],
        "description": "Aborts transaction matching the transaction_id as long as it is not yet complete",
        "operationId": "AbortTransaction",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Not allowed"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transaction/{transaction_id}/history": {
      "get": {
        "security": [
          {
            "payments_auth": [
              "read:transaction"
            ]
          }
        ],
        "description": "Returns the history of the transaction matching the transaction_id",
        "operationId": "RetrieveTransactionHistory",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction ID",
            "name": "transaction_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction found and retrieved",
            "schema": {
              "$ref": "#/definitions/TransactionHistory"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdjustmentData": {
      "type": "object",
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "code": {
          "description": "Adjustment code",
          "type": "string"
        },
        "detail": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Amount": {
      "description": "A monetary amount",
      "type": "number",
      "format": "float",
      "minimum": 0,
      "exclusiveMinimum": true,
      "example": 12.34
    },
    "AuthCode": {
      "description": "Authorization response code as returned by the issuing bank",
      "type": "string",
      "maxLength": 30,
      "minLength": 1,
      "example": "987012"
    },
    "Authorized": {
      "description": "Authorization from the bank approved",
      "type": "boolean",
      "example": true
    },
    "CCCvc": {
      "description": "Credit card verification code",
      "type": "string",
      "maxLength": 4,
      "minLength": 3,
      "example": "432"
    },
    "CCCvcPresence": {
      "description": "Declaration of CVC presence:\n  * 0: Merchant chose not to submit\n  * 1: Merchant has included CVC\n  * 2: Card holder states CVC illegible\n  * 9: Card holder states CVC not present\n",
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        9
      ]
    },
    "CCCvcResultCode": {
      "description": "Issuer CVC check response code:\n  * D - Transaction determined suspicious by issuing bank.\n  * I - Card verification number failed processor's data validation check.\n  * M - Card verification number matched.\n  * N - Card verification number not matched.\n  * P - Card verification number not processed by processor for unspecified reason.\n  * S - Card verification number is on the card but was not included in the request.\n  * U - Card verification is not supported by the issuing bank.\n  * X - Card verification is not supported by the card association.\n  * 1 - Card verification is not supported for this processor or card type.\n  * 2 - Unrecognized result code returned by processor for card verification response.\n  * 3 - No result code returned by processor.\n",
      "type": "string",
      "enum": [
        "D",
        "I",
        "M",
        "N",
        "P",
        "S",
        "U",
        "X",
        "1",
        "2",
        "3"
      ]
    },
    "CCExpire": {
      "description": "Credit card expiry date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "CCHolderName": {
      "description": "Cardholder name",
      "type": "string",
      "maxLength": 40,
      "minLength": 1,
      "example": "N E BODY"
    },
    "CCIssue": {
      "description": "Credit card issue number",
      "type": "integer",
      "maximum": 99,
      "minimum": 1,
      "example": 1
    },
    "CCNumber": {
      "description": "Primary Account Number (will be sanitised in all output)",
      "type": "string",
      "maxLength": 40,
      "minLength": 14,
      "example": "4111 1111 1111 1111"
    },
    "CCStart": {
      "description": "Credit card start date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "CCType": {
      "description": "Card type",
      "type": "string",
      "maxLength": 20,
      "example": "Visa"
    },
    "Choice": {
      "type": "object",
      "required": [
        "location",
        "deviceId",
        "posId"
      ],
      "properties": {
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "option": {
          "$ref": "#/definitions/Option"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "ConversionRate": {
      "description": "Currency transformation ration between currency and dccCurrency",
      "type": "number",
      "format": "float",
      "minimum": 0,
      "exclusiveMinimum": true,
      "example": 0.892
    },
    "Create": {
      "type": "object",
      "required": [
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rebillToken": {
          "$ref": "#/definitions/RebillToken"
        },
        "rentalDetail": {
          "$ref": "#/definitions/RentalDetail"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "Currency": {
      "description": "ISO 4217 currency code",
      "type": "string",
      "maxLength": 4,
      "minLength": 3,
      "example": "GBP"
    },
    "DeviceActivationCode": {
      "description": "Activation code for the EFTPOS device",
      "type": "string",
      "example": "X123456"
    },
    "DeviceDescription": {
      "description": "EFTPOS device description",
      "type": "string",
      "example": "Main device for location AB123"
    },
    "DeviceId": {
      "description": "EFTPOS device ID",
      "type": "string",
      "maxLength": 32,
      "example": "DX01234124-1241240-1231"
    },
    "DeviceIdleMessage": {
      "description": "EFTPOS message to display while idle",
      "type": "string",
      "example": "Honest John Car Rental"
    },
    "DeviceModel": {
      "description": "EFTPOS device model number",
      "type": "string",
      "example": "MX 915"
    },
    "DeviceSerial": {
      "description": "EFTPOS device serial number",
      "type": "string",
      "example": "123-456-789"
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "eventId": {
          "$ref": "#/definitions/EventID"
        },
        "meta": {
          "type": "string"
        },
        "stamp": {
          "$ref": "#/definitions/TxnDate"
        }
      }
    },
    "EventID": {
      "description": "Transaction event reference (internal)",
      "type": "string",
      "format": "uuid",
      "example": "0173c58c-f772-41b8-bdd9-3c150abe2356"
    },
    "HelpText": {
      "description": "A more detailed explanation of the response from the bank",
      "type": "string",
      "maxLength": 64,
      "example": "The Transaction was approved"
    },
    "Lane": {
      "type": "object",
      "properties": {
        "deviceDescription": {
          "$ref": "#/definitions/DeviceDescription"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "deviceIdleMessage": {
          "$ref": "#/definitions/DeviceIdleMessage"
        },
        "deviceModel": {
          "$ref": "#/definitions/DeviceModel"
        },
        "deviceSerial": {
          "$ref": "#/definitions/DeviceSerial"
        },
        "laneId": {
          "$ref": "#/definitions/LaneId"
        },
        "processor": {
          "$ref": "#/definitions/TxnProcessor"
        }
      }
    },
    "LaneId": {
      "description": "Lane identifier \u003clocation\u003e-\u003cindex\u003e",
      "type": "string",
      "example": "ABC31-2"
    },
    "LaneRequest": {
      "type": "object",
      "properties": {
        "activationCode": {
          "$ref": "#/definitions/DeviceActivationCode"
        },
        "deviceDescription": {
          "$ref": "#/definitions/DeviceDescription"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "laneId": {
          "$ref": "#/definitions/LaneId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "processor": {
          "$ref": "#/definitions/TxnProcessor"
        }
      }
    },
    "Lanes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Lane"
      }
    },
    "Location": {
      "description": "Location of the client branch of the rental",
      "type": "string",
      "maxLength": 32,
      "example": "GBR-RAC-0123"
    },
    "MerchantName": {
      "description": "Merchant name",
      "type": "string",
      "maxLength": 64,
      "example": "thermeon"
    },
    "MerchantNumber": {
      "description": "Merchant number",
      "type": "integer",
      "example": 12345678
    },
    "MerchantRef": {
      "description": "Merchant transaction reference",
      "type": "string",
      "maxLength": 64,
      "example": "Q032545"
    },
    "MerchantRefType": {
      "description": "Merchant transaction type",
      "type": "string",
      "maxLength": 16,
      "example": "RES"
    },
    "MerchantUser": {
      "description": "Merchant username",
      "type": "string",
      "maxLength": 16,
      "example": "bob34"
    },
    "Modify": {
      "type": "object",
      "required": [
        "txnRef",
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rentalDetail": {
          "$ref": "#/definitions/RentalDetail"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        }
      }
    },
    "Option": {
      "description": "Approval option text",
      "type": "object",
      "properties": {
        "name": {
          "description": "Option name",
          "type": "string",
          "example": "B1"
        },
        "value": {
          "description": "Option value",
          "type": "string",
          "example": "YES"
        }
      }
    },
    "OptionLine": {
      "description": "Option description line",
      "type": "string"
    },
    "POSId": {
      "description": "Point of Sale device ID",
      "type": "string",
      "maxLength": 32,
      "example": "TEL-00"
    },
    "PickupData": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "date": {
          "description": "pickup date, notation as per RFC 3339",
          "type": "string",
          "format": "date-time",
          "x-nullable": false,
          "example": "2017-07-21T15:04:05Z"
        },
        "location": {
          "description": "store location code",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "RebillToken": {
      "description": "Tokenized PAN provided by service providers, along with adapter name",
      "type": "string",
      "maxLength": 128,
      "example": "iveri|20E5E52BA01B5285CBC13D435EC788C6BD875FE434E2B075A2C32F8EE8CA5688AD"
    },
    "ReceiptText": {
      "description": "Receipt text, if this is populated without being Complete then it requires approval",
      "type": "string",
      "example": "Thermeon                   Vantage House              Mid Street                                            *---------EFTPOS----------*MERCHANT          123456789TERMINAL           1234567826 Jul 19 14:32            MASTERCARD            SWIPECARD       ************1114AUTHORISATION        002830REFERENCE            000812AUTH              GBP123.45TOTAL             GBP123.45                                   AUTHORISED                                         PLEASE SIGN BELOW                                                                                                                 *-------------------------*       MERCHANT COPY                                         PLEASE RETAIN            FOR YOUR RECORDS"
    },
    "ReceiptWidth": {
      "description": "Width of receipt lines, used to format ReceiptText for printing",
      "type": "integer",
      "example": 80
    },
    "RentalDetail": {
      "type": "object",
      "properties": {
        "adjustmentData": {
          "$ref": "#/definitions/AdjustmentData"
        },
        "customerName": {
          "type": "string"
        },
        "dailyRate": {
          "$ref": "#/definitions/Amount"
        },
        "duration": {
          "description": "Whole number of days for the rental",
          "type": "integer",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "insuranceCharges": {
          "$ref": "#/definitions/Amount"
        },
        "noShowIndicator": {
          "type": "string"
        },
        "pickupData": {
          "$ref": "#/definitions/PickupData"
        },
        "raNumber": {
          "type": "string"
        },
        "returnData": {
          "$ref": "#/definitions/ReturnData"
        },
        "vehicleClassCode": {
          "type": "string"
        },
        "weeklyRate": {
          "$ref": "#/definitions/Amount"
        }
      }
    },
    "ResponseCode": {
      "description": "Response code",
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "example": "00"
    },
    "ResponseText": {
      "description": "Response code description",
      "type": "string",
      "maxLength": 64,
      "example": "APPROVED"
    },
    "ReturnData": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "date": {
          "description": "pickup date, notation as per RFC 3339",
          "type": "string",
          "format": "date-time",
          "x-nullable": false,
          "example": "2017-07-21T15:04:05Z"
        },
        "distance": {
          "description": "whole units travelled",
          "type": "integer",
          "minimum": 0,
          "x-nullable": false
        },
        "distanceUnit": {
          "description": "Unit used for ` + "`" + `distance` + "`" + `:\n  * m - miles\n  * km - kilometres\n",
          "type": "string",
          "enum": [
            "m",
            "km"
          ]
        },
        "location": {
          "description": "store location code",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "SettleDate": {
      "description": "Expected date of settlement, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date",
      "x-nullable": true,
      "example": "2017-07-21"
    },
    "Tokenize": {
      "type": "object",
      "required": [
        "location",
        "deviceId",
        "posId"
      ],
      "properties": {
        "ccCvc": {
          "$ref": "#/definitions/CCCvc"
        },
        "ccCvcPresence": {
          "$ref": "#/definitions/CCCvcPresence"
        },
        "ccExpire": {
          "$ref": "#/definitions/CCExpire"
        },
        "ccHolderName": {
          "$ref": "#/definitions/CCHolderName"
        },
        "ccIssue": {
          "$ref": "#/definitions/CCIssue"
        },
        "ccNumber": {
          "$ref": "#/definitions/CCNumber"
        },
        "ccStart": {
          "$ref": "#/definitions/CCStart"
        },
        "ccType": {
          "$ref": "#/definitions/CCType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "txnRef",
        "txnType",
        "txnComplete",
        "txnProcessor",
        "txnDate",
        "amount",
        "currency"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Amount"
        },
        "authCode": {
          "$ref": "#/definitions/AuthCode"
        },
        "authorized": {
          "$ref": "#/definitions/Authorized"
        },
        "ccCvc": {
          "$ref": "#/definitions/CCCvc"
        },
        "ccCvcPresence": {
          "$ref": "#/definitions/CCCvcPresence"
        },
        "ccCvcResCode": {
          "$ref": "#/definitions/CCCvcResultCode"
        },
        "ccExpire": {
          "$ref": "#/definitions/CCExpire"
        },
        "ccHolderName": {
          "$ref": "#/definitions/CCHolderName"
        },
        "ccIssue": {
          "$ref": "#/definitions/CCIssue"
        },
        "ccNumber": {
          "$ref": "#/definitions/CCNumber"
        },
        "ccStart": {
          "$ref": "#/definitions/CCStart"
        },
        "ccType": {
          "$ref": "#/definitions/CCType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "dccAmount": {
          "$ref": "#/definitions/Amount"
        },
        "dccCommission": {
          "$ref": "#/definitions/Amount"
        },
        "dccConversionRate": {
          "$ref": "#/definitions/ConversionRate"
        },
        "dccCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "dccMarkup": {
          "$ref": "#/definitions/Amount"
        },
        "deviceId": {
          "$ref": "#/definitions/DeviceId"
        },
        "helpText": {
          "$ref": "#/definitions/HelpText"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "merchName": {
          "$ref": "#/definitions/MerchantName"
        },
        "merchNumber": {
          "$ref": "#/definitions/MerchantNumber"
        },
        "merchRef": {
          "$ref": "#/definitions/MerchantRef"
        },
        "merchRefType": {
          "$ref": "#/definitions/MerchantRefType"
        },
        "merchUser": {
          "$ref": "#/definitions/MerchantUser"
        },
        "optLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionLine"
          }
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "posId": {
          "$ref": "#/definitions/POSId"
        },
        "rebillToken": {
          "$ref": "#/definitions/RebillToken"
        },
        "receiptText": {
          "$ref": "#/definitions/ReceiptText"
        },
        "receiptWidth": {
          "$ref": "#/definitions/ReceiptWidth"
        },
        "respCode": {
          "$ref": "#/definitions/ResponseCode"
        },
        "respText": {
          "$ref": "#/definitions/ResponseText"
        },
        "settleDate": {
          "$ref": "#/definitions/SettleDate"
        },
        "txnComplete": {
          "$ref": "#/definitions/TxnComplete"
        },
        "txnDate": {
          "$ref": "#/definitions/TxnDate"
        },
        "txnProcessor": {
          "$ref": "#/definitions/TxnProcessor"
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnRefExt": {
          "$ref": "#/definitions/TxnReferenceExternal"
        },
        "txnRefParent": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnType": {
          "$ref": "#/definitions/TxnType"
        }
      }
    },
    "TransactionHistory": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "txnHistory": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "txnRef": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnRefParent": {
          "$ref": "#/definitions/TxnReference"
        },
        "txnType": {
          "$ref": "#/definitions/TxnType"
        }
      }
    },
    "TxnComplete": {
      "description": "Transaction is complete",
      "type": "boolean",
      "example": true
    },
    "TxnDate": {
      "description": "Transaction date, full-date notation as per RFC 3339",
      "type": "string",
      "format": "date-time",
      "x-nullable": true,
      "example": "2017-07-21T15:04:05Z"
    },
    "TxnProcessor": {
      "description": "Transaction processor",
      "type": "string",
      "maxLength": 32,
      "example": "Payment Express"
    },
    "TxnReference": {
      "description": "Transaction reference (internal)",
      "type": "string",
      "format": "uuid",
      "example": "0173c58c-f772-41b8-bdd9-3c150abe2356"
    },
    "TxnReferenceExternal": {
      "description": "Transaction reference (external)",
      "type": "string",
      "maxLength": 40,
      "example": "292732.287654448218"
    },
    "TxnType": {
      "description": "Transaction type",
      "type": "string",
      "enum": [
        "auth",
        "capture",
        "refund",
        "sale",
        "void"
      ]
    }
  },
  "parameters": {
    "RequestCreate": {
      "name": "RequestCreate",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Create"
      }
    },
    "RequestCreateLane": {
      "name": "RequestCreateLane",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/LaneRequest"
      }
    },
    "RequestModify": {
      "name": "RequestModify",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Modify"
      }
    },
    "RequestOption": {
      "name": "RequestOption",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Choice"
      }
    },
    "RequestTokenize": {
      "name": "RequestTokenize",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Tokenize"
      }
    }
  },
  "securityDefinitions": {
    "payments_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://auth.thermeon.io/oauth/dialog",
      "scopes": {
        "read:lane": "read transaction record",
        "read:transaction": "read transaction record",
        "write:lane": "write a transaction",
        "write:transaction": "write a transaction"
      }
    }
  }
}`))
}
