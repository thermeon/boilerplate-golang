// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CaptureTransactionHandlerFunc turns a function with the right signature into a capture transaction handler
type CaptureTransactionHandlerFunc func(CaptureTransactionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CaptureTransactionHandlerFunc) Handle(params CaptureTransactionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CaptureTransactionHandler interface for that can handle valid capture transaction params
type CaptureTransactionHandler interface {
	Handle(CaptureTransactionParams, interface{}) middleware.Responder
}

// NewCaptureTransaction creates a new http.Handler for the capture transaction operation
func NewCaptureTransaction(ctx *middleware.Context, handler CaptureTransactionHandler) *CaptureTransaction {
	return &CaptureTransaction{Context: ctx, Handler: handler}
}

/* CaptureTransaction swagger:route POST /transaction/capture captureTransaction

Requests prior authorisation be CAPTUREd for a specified amount, this may be up to the value of the AUTH

*/
type CaptureTransaction struct {
	Context *middleware.Context
	Handler CaptureTransactionHandler
}

func (o *CaptureTransaction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCaptureTransactionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
