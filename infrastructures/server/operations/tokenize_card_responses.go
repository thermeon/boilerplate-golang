// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/thermeon/boilerplate-golang/infrastructures/server/models"
)

// TokenizeCardCreatedCode is the HTTP code returned for type TokenizeCardCreated
const TokenizeCardCreatedCode int = 201

/*TokenizeCardCreated successful operation

swagger:response tokenizeCardCreated
*/
type TokenizeCardCreated struct {
	/*created resource

	 */
	Location string `json:"location"`
}

// NewTokenizeCardCreated creates TokenizeCardCreated with default headers values
func NewTokenizeCardCreated() *TokenizeCardCreated {

	return &TokenizeCardCreated{}
}

// WithLocation adds the location to the tokenize card created response
func (o *TokenizeCardCreated) WithLocation(location string) *TokenizeCardCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the tokenize card created response
func (o *TokenizeCardCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *TokenizeCardCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header location

	location := o.Location
	if location != "" {
		rw.Header().Set("location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// TokenizeCardBadRequestCode is the HTTP code returned for type TokenizeCardBadRequest
const TokenizeCardBadRequestCode int = 400

/*TokenizeCardBadRequest Bad Request

swagger:response tokenizeCardBadRequest
*/
type TokenizeCardBadRequest struct {
}

// NewTokenizeCardBadRequest creates TokenizeCardBadRequest with default headers values
func NewTokenizeCardBadRequest() *TokenizeCardBadRequest {

	return &TokenizeCardBadRequest{}
}

// WriteResponse to the client
func (o *TokenizeCardBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// TokenizeCardUnauthorizedCode is the HTTP code returned for type TokenizeCardUnauthorized
const TokenizeCardUnauthorizedCode int = 401

/*TokenizeCardUnauthorized Unauthorized

swagger:response tokenizeCardUnauthorized
*/
type TokenizeCardUnauthorized struct {
}

// NewTokenizeCardUnauthorized creates TokenizeCardUnauthorized with default headers values
func NewTokenizeCardUnauthorized() *TokenizeCardUnauthorized {

	return &TokenizeCardUnauthorized{}
}

// WriteResponse to the client
func (o *TokenizeCardUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

/*TokenizeCardDefault generic error response

swagger:response tokenizeCardDefault
*/
type TokenizeCardDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewTokenizeCardDefault creates TokenizeCardDefault with default headers values
func NewTokenizeCardDefault(code int) *TokenizeCardDefault {
	if code <= 0 {
		code = 500
	}

	return &TokenizeCardDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the tokenize card default response
func (o *TokenizeCardDefault) WithStatusCode(code int) *TokenizeCardDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the tokenize card default response
func (o *TokenizeCardDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the tokenize card default response
func (o *TokenizeCardDefault) WithPayload(payload *models.Error) *TokenizeCardDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the tokenize card default response
func (o *TokenizeCardDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TokenizeCardDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
