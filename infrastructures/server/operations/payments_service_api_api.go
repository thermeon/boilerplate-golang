// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPaymentsServiceAPIAPI creates a new PaymentsServiceAPI instance
func NewPaymentsServiceAPIAPI(spec *loads.Document) *PaymentsServiceAPIAPI {
	return &PaymentsServiceAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AbortTransactionHandler: AbortTransactionHandlerFunc(func(params AbortTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AbortTransaction has not yet been implemented")
		}),
		AuthorizationTransactionHandler: AuthorizationTransactionHandlerFunc(func(params AuthorizationTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AuthorizationTransaction has not yet been implemented")
		}),
		CaptureTransactionHandler: CaptureTransactionHandlerFunc(func(params CaptureTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CaptureTransaction has not yet been implemented")
		}),
		ChooseOptionHandler: ChooseOptionHandlerFunc(func(params ChooseOptionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ChooseOption has not yet been implemented")
		}),
		CreateLaneHandler: CreateLaneHandlerFunc(func(params CreateLaneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CreateLane has not yet been implemented")
		}),
		DeleteLaneHandler: DeleteLaneHandlerFunc(func(params DeleteLaneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation DeleteLane has not yet been implemented")
		}),
		GetLaneHandler: GetLaneHandlerFunc(func(params GetLaneParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetLane has not yet been implemented")
		}),
		GetLanesHandler: GetLanesHandlerFunc(func(params GetLanesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation GetLanes has not yet been implemented")
		}),
		RefundTransactionHandler: RefundTransactionHandlerFunc(func(params RefundTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RefundTransaction has not yet been implemented")
		}),
		RetrieveTransactionHandler: RetrieveTransactionHandlerFunc(func(params RetrieveTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetrieveTransaction has not yet been implemented")
		}),
		RetrieveTransactionHistoryHandler: RetrieveTransactionHistoryHandlerFunc(func(params RetrieveTransactionHistoryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation RetrieveTransactionHistory has not yet been implemented")
		}),
		SaleTransactionHandler: SaleTransactionHandlerFunc(func(params SaleTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SaleTransaction has not yet been implemented")
		}),
		TokenizeCardHandler: TokenizeCardHandlerFunc(func(params TokenizeCardParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenizeCard has not yet been implemented")
		}),
		VoidTransactionHandler: VoidTransactionHandlerFunc(func(params VoidTransactionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation VoidTransaction has not yet been implemented")
		}),

		PaymentsAuthAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (payments_auth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*PaymentsServiceAPIAPI Payments Service API, internal to Thermeon */
type PaymentsServiceAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// PaymentsAuthAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	PaymentsAuthAuth func(string, []string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AbortTransactionHandler sets the operation handler for the abort transaction operation
	AbortTransactionHandler AbortTransactionHandler
	// AuthorizationTransactionHandler sets the operation handler for the authorization transaction operation
	AuthorizationTransactionHandler AuthorizationTransactionHandler
	// CaptureTransactionHandler sets the operation handler for the capture transaction operation
	CaptureTransactionHandler CaptureTransactionHandler
	// ChooseOptionHandler sets the operation handler for the choose option operation
	ChooseOptionHandler ChooseOptionHandler
	// CreateLaneHandler sets the operation handler for the create lane operation
	CreateLaneHandler CreateLaneHandler
	// DeleteLaneHandler sets the operation handler for the delete lane operation
	DeleteLaneHandler DeleteLaneHandler
	// GetLaneHandler sets the operation handler for the get lane operation
	GetLaneHandler GetLaneHandler
	// GetLanesHandler sets the operation handler for the get lanes operation
	GetLanesHandler GetLanesHandler
	// RefundTransactionHandler sets the operation handler for the refund transaction operation
	RefundTransactionHandler RefundTransactionHandler
	// RetrieveTransactionHandler sets the operation handler for the retrieve transaction operation
	RetrieveTransactionHandler RetrieveTransactionHandler
	// RetrieveTransactionHistoryHandler sets the operation handler for the retrieve transaction history operation
	RetrieveTransactionHistoryHandler RetrieveTransactionHistoryHandler
	// SaleTransactionHandler sets the operation handler for the sale transaction operation
	SaleTransactionHandler SaleTransactionHandler
	// TokenizeCardHandler sets the operation handler for the tokenize card operation
	TokenizeCardHandler TokenizeCardHandler
	// VoidTransactionHandler sets the operation handler for the void transaction operation
	VoidTransactionHandler VoidTransactionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *PaymentsServiceAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *PaymentsServiceAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *PaymentsServiceAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PaymentsServiceAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *PaymentsServiceAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *PaymentsServiceAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PaymentsServiceAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PaymentsServiceAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PaymentsServiceAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PaymentsServiceAPIAPI
func (o *PaymentsServiceAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.PaymentsAuthAuth == nil {
		unregistered = append(unregistered, "PaymentsAuthAuth")
	}

	if o.AbortTransactionHandler == nil {
		unregistered = append(unregistered, "AbortTransactionHandler")
	}
	if o.AuthorizationTransactionHandler == nil {
		unregistered = append(unregistered, "AuthorizationTransactionHandler")
	}
	if o.CaptureTransactionHandler == nil {
		unregistered = append(unregistered, "CaptureTransactionHandler")
	}
	if o.ChooseOptionHandler == nil {
		unregistered = append(unregistered, "ChooseOptionHandler")
	}
	if o.CreateLaneHandler == nil {
		unregistered = append(unregistered, "CreateLaneHandler")
	}
	if o.DeleteLaneHandler == nil {
		unregistered = append(unregistered, "DeleteLaneHandler")
	}
	if o.GetLaneHandler == nil {
		unregistered = append(unregistered, "GetLaneHandler")
	}
	if o.GetLanesHandler == nil {
		unregistered = append(unregistered, "GetLanesHandler")
	}
	if o.RefundTransactionHandler == nil {
		unregistered = append(unregistered, "RefundTransactionHandler")
	}
	if o.RetrieveTransactionHandler == nil {
		unregistered = append(unregistered, "RetrieveTransactionHandler")
	}
	if o.RetrieveTransactionHistoryHandler == nil {
		unregistered = append(unregistered, "RetrieveTransactionHistoryHandler")
	}
	if o.SaleTransactionHandler == nil {
		unregistered = append(unregistered, "SaleTransactionHandler")
	}
	if o.TokenizeCardHandler == nil {
		unregistered = append(unregistered, "TokenizeCardHandler")
	}
	if o.VoidTransactionHandler == nil {
		unregistered = append(unregistered, "VoidTransactionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PaymentsServiceAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PaymentsServiceAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "payments_auth":
			result[name] = o.BearerAuthenticator(name, o.PaymentsAuthAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *PaymentsServiceAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *PaymentsServiceAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *PaymentsServiceAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PaymentsServiceAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the payments service API API
func (o *PaymentsServiceAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *PaymentsServiceAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/transaction/{transaction_id}"] = NewAbortTransaction(o.context, o.AbortTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/transaction/auth"] = NewAuthorizationTransaction(o.context, o.AuthorizationTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/transaction/capture"] = NewCaptureTransaction(o.context, o.CaptureTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/card/option"] = NewChooseOption(o.context, o.ChooseOptionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lane"] = NewCreateLane(o.context, o.CreateLaneHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/lane/{processor}/{lane_id}"] = NewDeleteLane(o.context, o.DeleteLaneHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lane/{processor}/{lane_id}"] = NewGetLane(o.context, o.GetLaneHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lanes/{processor}/{location}"] = NewGetLanes(o.context, o.GetLanesHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/transaction/refund"] = NewRefundTransaction(o.context, o.RefundTransactionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transaction/{transaction_id}"] = NewRetrieveTransaction(o.context, o.RetrieveTransactionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/transaction/{transaction_id}/history"] = NewRetrieveTransactionHistory(o.context, o.RetrieveTransactionHistoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/transaction/sale"] = NewSaleTransaction(o.context, o.SaleTransactionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/card/tokenize"] = NewTokenizeCard(o.context, o.TokenizeCardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/transaction/void"] = NewVoidTransaction(o.context, o.VoidTransactionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PaymentsServiceAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *PaymentsServiceAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *PaymentsServiceAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *PaymentsServiceAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *PaymentsServiceAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
