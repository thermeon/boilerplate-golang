// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/thermeon/boilerplate-golang/infrastructures/server/models"
)

// DeleteLaneCreatedCode is the HTTP code returned for type DeleteLaneCreated
const DeleteLaneCreatedCode int = 201

/*DeleteLaneCreated Lane deleted

swagger:response deleteLaneCreated
*/
type DeleteLaneCreated struct {
}

// NewDeleteLaneCreated creates DeleteLaneCreated with default headers values
func NewDeleteLaneCreated() *DeleteLaneCreated {

	return &DeleteLaneCreated{}
}

// WriteResponse to the client
func (o *DeleteLaneCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// DeleteLaneBadRequestCode is the HTTP code returned for type DeleteLaneBadRequest
const DeleteLaneBadRequestCode int = 400

/*DeleteLaneBadRequest Bad Request

swagger:response deleteLaneBadRequest
*/
type DeleteLaneBadRequest struct {
}

// NewDeleteLaneBadRequest creates DeleteLaneBadRequest with default headers values
func NewDeleteLaneBadRequest() *DeleteLaneBadRequest {

	return &DeleteLaneBadRequest{}
}

// WriteResponse to the client
func (o *DeleteLaneBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// DeleteLaneUnauthorizedCode is the HTTP code returned for type DeleteLaneUnauthorized
const DeleteLaneUnauthorizedCode int = 401

/*DeleteLaneUnauthorized Unauthorized

swagger:response deleteLaneUnauthorized
*/
type DeleteLaneUnauthorized struct {
}

// NewDeleteLaneUnauthorized creates DeleteLaneUnauthorized with default headers values
func NewDeleteLaneUnauthorized() *DeleteLaneUnauthorized {

	return &DeleteLaneUnauthorized{}
}

// WriteResponse to the client
func (o *DeleteLaneUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// DeleteLaneNotFoundCode is the HTTP code returned for type DeleteLaneNotFound
const DeleteLaneNotFoundCode int = 404

/*DeleteLaneNotFound Not Found

swagger:response deleteLaneNotFound
*/
type DeleteLaneNotFound struct {
}

// NewDeleteLaneNotFound creates DeleteLaneNotFound with default headers values
func NewDeleteLaneNotFound() *DeleteLaneNotFound {

	return &DeleteLaneNotFound{}
}

// WriteResponse to the client
func (o *DeleteLaneNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*DeleteLaneDefault generic error response

swagger:response deleteLaneDefault
*/
type DeleteLaneDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteLaneDefault creates DeleteLaneDefault with default headers values
func NewDeleteLaneDefault(code int) *DeleteLaneDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteLaneDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete lane default response
func (o *DeleteLaneDefault) WithStatusCode(code int) *DeleteLaneDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete lane default response
func (o *DeleteLaneDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete lane default response
func (o *DeleteLaneDefault) WithPayload(payload *models.Error) *DeleteLaneDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete lane default response
func (o *DeleteLaneDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteLaneDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
