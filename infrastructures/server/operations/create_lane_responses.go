// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/thermeon/boilerplate-golang/infrastructures/server/models"
)

// CreateLaneCreatedCode is the HTTP code returned for type CreateLaneCreated
const CreateLaneCreatedCode int = 201

/*CreateLaneCreated successful operation

swagger:response createLaneCreated
*/
type CreateLaneCreated struct {
	/*created resource

	 */
	Location string `json:"location"`
}

// NewCreateLaneCreated creates CreateLaneCreated with default headers values
func NewCreateLaneCreated() *CreateLaneCreated {

	return &CreateLaneCreated{}
}

// WithLocation adds the location to the create lane created response
func (o *CreateLaneCreated) WithLocation(location string) *CreateLaneCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the create lane created response
func (o *CreateLaneCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *CreateLaneCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header location

	location := o.Location
	if location != "" {
		rw.Header().Set("location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateLaneBadRequestCode is the HTTP code returned for type CreateLaneBadRequest
const CreateLaneBadRequestCode int = 400

/*CreateLaneBadRequest Bad Request

swagger:response createLaneBadRequest
*/
type CreateLaneBadRequest struct {
}

// NewCreateLaneBadRequest creates CreateLaneBadRequest with default headers values
func NewCreateLaneBadRequest() *CreateLaneBadRequest {

	return &CreateLaneBadRequest{}
}

// WriteResponse to the client
func (o *CreateLaneBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// CreateLaneUnauthorizedCode is the HTTP code returned for type CreateLaneUnauthorized
const CreateLaneUnauthorizedCode int = 401

/*CreateLaneUnauthorized Unauthorized

swagger:response createLaneUnauthorized
*/
type CreateLaneUnauthorized struct {
}

// NewCreateLaneUnauthorized creates CreateLaneUnauthorized with default headers values
func NewCreateLaneUnauthorized() *CreateLaneUnauthorized {

	return &CreateLaneUnauthorized{}
}

// WriteResponse to the client
func (o *CreateLaneUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

/*CreateLaneDefault generic error response

swagger:response createLaneDefault
*/
type CreateLaneDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateLaneDefault creates CreateLaneDefault with default headers values
func NewCreateLaneDefault(code int) *CreateLaneDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateLaneDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create lane default response
func (o *CreateLaneDefault) WithStatusCode(code int) *CreateLaneDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create lane default response
func (o *CreateLaneDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create lane default response
func (o *CreateLaneDefault) WithPayload(payload *models.Error) *CreateLaneDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create lane default response
func (o *CreateLaneDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLaneDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
