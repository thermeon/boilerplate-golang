// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/thermeon/boilerplate-golang/infrastructures/server/models"
)

// ChooseOptionCreatedCode is the HTTP code returned for type ChooseOptionCreated
const ChooseOptionCreatedCode int = 201

/*ChooseOptionCreated successful operation

swagger:response chooseOptionCreated
*/
type ChooseOptionCreated struct {
	/*created resource

	 */
	Location string `json:"location"`
}

// NewChooseOptionCreated creates ChooseOptionCreated with default headers values
func NewChooseOptionCreated() *ChooseOptionCreated {

	return &ChooseOptionCreated{}
}

// WithLocation adds the location to the choose option created response
func (o *ChooseOptionCreated) WithLocation(location string) *ChooseOptionCreated {
	o.Location = location
	return o
}

// SetLocation sets the location to the choose option created response
func (o *ChooseOptionCreated) SetLocation(location string) {
	o.Location = location
}

// WriteResponse to the client
func (o *ChooseOptionCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header location

	location := o.Location
	if location != "" {
		rw.Header().Set("location", location)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// ChooseOptionBadRequestCode is the HTTP code returned for type ChooseOptionBadRequest
const ChooseOptionBadRequestCode int = 400

/*ChooseOptionBadRequest Bad Request

swagger:response chooseOptionBadRequest
*/
type ChooseOptionBadRequest struct {
}

// NewChooseOptionBadRequest creates ChooseOptionBadRequest with default headers values
func NewChooseOptionBadRequest() *ChooseOptionBadRequest {

	return &ChooseOptionBadRequest{}
}

// WriteResponse to the client
func (o *ChooseOptionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// ChooseOptionUnauthorizedCode is the HTTP code returned for type ChooseOptionUnauthorized
const ChooseOptionUnauthorizedCode int = 401

/*ChooseOptionUnauthorized Unauthorized

swagger:response chooseOptionUnauthorized
*/
type ChooseOptionUnauthorized struct {
}

// NewChooseOptionUnauthorized creates ChooseOptionUnauthorized with default headers values
func NewChooseOptionUnauthorized() *ChooseOptionUnauthorized {

	return &ChooseOptionUnauthorized{}
}

// WriteResponse to the client
func (o *ChooseOptionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

/*ChooseOptionDefault generic error response

swagger:response chooseOptionDefault
*/
type ChooseOptionDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewChooseOptionDefault creates ChooseOptionDefault with default headers values
func NewChooseOptionDefault(code int) *ChooseOptionDefault {
	if code <= 0 {
		code = 500
	}

	return &ChooseOptionDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the choose option default response
func (o *ChooseOptionDefault) WithStatusCode(code int) *ChooseOptionDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the choose option default response
func (o *ChooseOptionDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the choose option default response
func (o *ChooseOptionDefault) WithPayload(payload *models.Error) *ChooseOptionDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the choose option default response
func (o *ChooseOptionDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChooseOptionDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
