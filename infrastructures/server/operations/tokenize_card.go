// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TokenizeCardHandlerFunc turns a function with the right signature into a tokenize card handler
type TokenizeCardHandlerFunc func(TokenizeCardParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn TokenizeCardHandlerFunc) Handle(params TokenizeCardParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// TokenizeCardHandler interface for that can handle valid tokenize card params
type TokenizeCardHandler interface {
	Handle(TokenizeCardParams, interface{}) middleware.Responder
}

// NewTokenizeCard creates a new http.Handler for the tokenize card operation
func NewTokenizeCard(ctx *middleware.Context, handler TokenizeCardHandler) *TokenizeCard {
	return &TokenizeCard{Context: ctx, Handler: handler}
}

/* TokenizeCard swagger:route POST /card/tokenize tokenizeCard

Request that a card be processed and tokenized

*/
type TokenizeCard struct {
	Context *middleware.Context
	Handler TokenizeCardHandler
}

func (o *TokenizeCard) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTokenizeCardParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
