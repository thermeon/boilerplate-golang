// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Choice choice
//
// swagger:model Choice
type Choice struct {

	// device Id
	// Required: true
	DeviceID *DeviceID `json:"deviceId"`

	// location
	// Required: true
	Location *Location `json:"location"`

	// merch user
	MerchUser MerchantUser `json:"merchUser,omitempty"`

	// option
	Option *Option `json:"option,omitempty"`

	// pos Id
	// Required: true
	PosID *POSID `json:"posId"`

	// txn ref
	// Format: uuid
	TxnRef TxnReference `json:"txnRef,omitempty"`
}

// Validate validates this choice
func (m *Choice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Choice) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	if m.DeviceID != nil {
		if err := m.DeviceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) validateMerchUser(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchUser) { // not required
		return nil
	}

	if err := m.MerchUser.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Choice) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	if m.Option != nil {
		if err := m.Option.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("option")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) validatePosID(formats strfmt.Registry) error {

	if err := validate.Required("posId", "body", m.PosID); err != nil {
		return err
	}

	if err := validate.Required("posId", "body", m.PosID); err != nil {
		return err
	}

	if m.PosID != nil {
		if err := m.PosID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posId")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) validateTxnRef(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnRef) { // not required
		return nil
	}

	if err := m.TxnRef.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRef")
		}
		return err
	}

	return nil
}

// ContextValidate validate this choice based on the context it is used
func (m *Choice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Choice) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceID != nil {
		if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) contextValidateMerchUser(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchUser.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Choice) contextValidateOption(ctx context.Context, formats strfmt.Registry) error {

	if m.Option != nil {
		if err := m.Option.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("option")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) contextValidatePosID(ctx context.Context, formats strfmt.Registry) error {

	if m.PosID != nil {
		if err := m.PosID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posId")
			}
			return err
		}
	}

	return nil
}

func (m *Choice) contextValidateTxnRef(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnRef.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRef")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Choice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Choice) UnmarshalBinary(b []byte) error {
	var res Choice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
