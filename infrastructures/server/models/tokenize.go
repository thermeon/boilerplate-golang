// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Tokenize tokenize
//
// swagger:model Tokenize
type Tokenize struct {

	// cc cvc
	CcCvc CCCvc `json:"ccCvc,omitempty"`

	// cc cvc presence
	CcCvcPresence CCCvcPresence `json:"ccCvcPresence,omitempty"`

	// cc expire
	// Format: date
	CcExpire *CCExpire `json:"ccExpire,omitempty"`

	// cc holder name
	CcHolderName CCHolderName `json:"ccHolderName,omitempty"`

	// cc issue
	CcIssue CCIssue `json:"ccIssue,omitempty"`

	// cc number
	CcNumber CCNumber `json:"ccNumber,omitempty"`

	// cc start
	// Format: date
	CcStart *CCStart `json:"ccStart,omitempty"`

	// cc type
	CcType CCType `json:"ccType,omitempty"`

	// currency
	Currency Currency `json:"currency,omitempty"`

	// device Id
	// Required: true
	DeviceID *DeviceID `json:"deviceId"`

	// location
	// Required: true
	Location *Location `json:"location"`

	// merch name
	MerchName MerchantName `json:"merchName,omitempty"`

	// merch number
	MerchNumber MerchantNumber `json:"merchNumber,omitempty"`

	// merch ref
	MerchRef MerchantRef `json:"merchRef,omitempty"`

	// merch ref type
	MerchRefType MerchantRefType `json:"merchRefType,omitempty"`

	// merch user
	MerchUser MerchantUser `json:"merchUser,omitempty"`

	// pos Id
	// Required: true
	PosID *POSID `json:"posId"`
}

// Validate validates this tokenize
func (m *Tokenize) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCcCvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcCvcPresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcHolderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRefType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tokenize) validateCcCvc(formats strfmt.Registry) error {
	if swag.IsZero(m.CcCvc) { // not required
		return nil
	}

	if err := m.CcCvc.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvc")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvc")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCcCvcPresence(formats strfmt.Registry) error {
	if swag.IsZero(m.CcCvcPresence) { // not required
		return nil
	}

	if err := m.CcCvcPresence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcPresence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcPresence")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCcExpire(formats strfmt.Registry) error {
	if swag.IsZero(m.CcExpire) { // not required
		return nil
	}

	if m.CcExpire != nil {
		if err := m.CcExpire.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccExpire")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccExpire")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) validateCcHolderName(formats strfmt.Registry) error {
	if swag.IsZero(m.CcHolderName) { // not required
		return nil
	}

	if err := m.CcHolderName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccHolderName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccHolderName")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCcIssue(formats strfmt.Registry) error {
	if swag.IsZero(m.CcIssue) { // not required
		return nil
	}

	if err := m.CcIssue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccIssue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccIssue")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCcNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.CcNumber) { // not required
		return nil
	}

	if err := m.CcNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccNumber")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCcStart(formats strfmt.Registry) error {
	if swag.IsZero(m.CcStart) { // not required
		return nil
	}

	if m.CcStart != nil {
		if err := m.CcStart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccStart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccStart")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) validateCcType(formats strfmt.Registry) error {
	if swag.IsZero(m.CcType) { // not required
		return nil
	}

	if err := m.CcType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccType")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currency")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	if m.DeviceID != nil {
		if err := m.DeviceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) validateMerchName(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchName) { // not required
		return nil
	}

	if err := m.MerchName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateMerchNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchNumber) { // not required
		return nil
	}

	if err := m.MerchNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateMerchRef(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRef) { // not required
		return nil
	}

	if err := m.MerchRef.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateMerchRefType(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRefType) { // not required
		return nil
	}

	if err := m.MerchRefType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validateMerchUser(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchUser) { // not required
		return nil
	}

	if err := m.MerchUser.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Tokenize) validatePosID(formats strfmt.Registry) error {

	if err := validate.Required("posId", "body", m.PosID); err != nil {
		return err
	}

	if err := validate.Required("posId", "body", m.PosID); err != nil {
		return err
	}

	if m.PosID != nil {
		if err := m.PosID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tokenize based on the context it is used
func (m *Tokenize) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCcCvc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcCvcPresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcExpire(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcHolderName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcIssue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRefType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tokenize) contextValidateCcCvc(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcCvc.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvc")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvc")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCcCvcPresence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcCvcPresence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcPresence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcPresence")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCcExpire(ctx context.Context, formats strfmt.Registry) error {

	if m.CcExpire != nil {
		if err := m.CcExpire.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccExpire")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccExpire")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) contextValidateCcHolderName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcHolderName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccHolderName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccHolderName")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCcIssue(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcIssue.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccIssue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccIssue")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCcNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccNumber")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCcStart(ctx context.Context, formats strfmt.Registry) error {

	if m.CcStart != nil {
		if err := m.CcStart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccStart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccStart")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) contextValidateCcType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccType")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Currency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currency")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceID != nil {
		if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Tokenize) contextValidateMerchName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateMerchNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateMerchRef(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRef.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateMerchRefType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRefType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidateMerchUser(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchUser.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Tokenize) contextValidatePosID(ctx context.Context, formats strfmt.Registry) error {

	if m.PosID != nil {
		if err := m.PosID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("posId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("posId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Tokenize) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tokenize) UnmarshalBinary(b []byte) error {
	var res Tokenize
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
