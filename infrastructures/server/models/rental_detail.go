// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RentalDetail rental detail
//
// swagger:model RentalDetail
type RentalDetail struct {

	// adjustment data
	AdjustmentData *AdjustmentData `json:"adjustmentData,omitempty"`

	// customer name
	CustomerName string `json:"customerName,omitempty"`

	// daily rate
	DailyRate Amount `json:"dailyRate,omitempty"`

	// Whole number of days for the rental
	// Minimum: > 0
	Duration int64 `json:"duration,omitempty"`

	// insurance charges
	InsuranceCharges Amount `json:"insuranceCharges,omitempty"`

	// no show indicator
	NoShowIndicator string `json:"noShowIndicator,omitempty"`

	// pickup data
	PickupData *PickupData `json:"pickupData,omitempty"`

	// ra number
	RaNumber string `json:"raNumber,omitempty"`

	// return data
	ReturnData *ReturnData `json:"returnData,omitempty"`

	// vehicle class code
	VehicleClassCode string `json:"vehicleClassCode,omitempty"`

	// weekly rate
	WeeklyRate Amount `json:"weeklyRate,omitempty"`
}

// Validate validates this rental detail
func (m *RentalDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsuranceCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeklyRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RentalDetail) validateAdjustmentData(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustmentData) { // not required
		return nil
	}

	if m.AdjustmentData != nil {
		if err := m.AdjustmentData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustmentData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adjustmentData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) validateDailyRate(formats strfmt.Registry) error {
	if swag.IsZero(m.DailyRate) { // not required
		return nil
	}

	if err := m.DailyRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dailyRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dailyRate")
		}
		return err
	}

	return nil
}

func (m *RentalDetail) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if err := validate.MinimumInt("duration", "body", m.Duration, 0, true); err != nil {
		return err
	}

	return nil
}

func (m *RentalDetail) validateInsuranceCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.InsuranceCharges) { // not required
		return nil
	}

	if err := m.InsuranceCharges.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("insuranceCharges")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("insuranceCharges")
		}
		return err
	}

	return nil
}

func (m *RentalDetail) validatePickupData(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupData) { // not required
		return nil
	}

	if m.PickupData != nil {
		if err := m.PickupData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) validateReturnData(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnData) { // not required
		return nil
	}

	if m.ReturnData != nil {
		if err := m.ReturnData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) validateWeeklyRate(formats strfmt.Registry) error {
	if swag.IsZero(m.WeeklyRate) { // not required
		return nil
	}

	if err := m.WeeklyRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weeklyRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weeklyRate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this rental detail based on the context it is used
func (m *RentalDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustmentData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDailyRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsuranceCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeeklyRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RentalDetail) contextValidateAdjustmentData(ctx context.Context, formats strfmt.Registry) error {

	if m.AdjustmentData != nil {
		if err := m.AdjustmentData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustmentData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adjustmentData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) contextValidateDailyRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DailyRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dailyRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dailyRate")
		}
		return err
	}

	return nil
}

func (m *RentalDetail) contextValidateInsuranceCharges(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InsuranceCharges.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("insuranceCharges")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("insuranceCharges")
		}
		return err
	}

	return nil
}

func (m *RentalDetail) contextValidatePickupData(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupData != nil {
		if err := m.PickupData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) contextValidateReturnData(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnData != nil {
		if err := m.ReturnData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnData")
			}
			return err
		}
	}

	return nil
}

func (m *RentalDetail) contextValidateWeeklyRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.WeeklyRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("weeklyRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("weeklyRate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RentalDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RentalDetail) UnmarshalBinary(b []byte) error {
	var res RentalDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
