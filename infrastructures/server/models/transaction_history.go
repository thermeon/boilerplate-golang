// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionHistory transaction history
//
// swagger:model TransactionHistory
type TransactionHistory struct {

	// events
	Events []*Event `json:"events"`

	// txn history
	TxnHistory []interface{} `json:"txnHistory"`

	// txn ref
	// Format: uuid
	TxnRef TxnReference `json:"txnRef,omitempty"`

	// txn ref parent
	// Format: uuid
	TxnRefParent TxnReference `json:"txnRefParent,omitempty"`

	// txn type
	TxnType TxnType `json:"txnType,omitempty"`
}

// Validate validates this transaction history
func (m *TransactionHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRefParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionHistory) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionHistory) validateTxnRef(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnRef) { // not required
		return nil
	}

	if err := m.TxnRef.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRef")
		}
		return err
	}

	return nil
}

func (m *TransactionHistory) validateTxnRefParent(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnRefParent) { // not required
		return nil
	}

	if err := m.TxnRefParent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefParent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefParent")
		}
		return err
	}

	return nil
}

func (m *TransactionHistory) validateTxnType(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnType) { // not required
		return nil
	}

	if err := m.TxnType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this transaction history based on the context it is used
func (m *TransactionHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRefParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionHistory) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionHistory) contextValidateTxnRef(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnRef.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRef")
		}
		return err
	}

	return nil
}

func (m *TransactionHistory) contextValidateTxnRefParent(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnRefParent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefParent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefParent")
		}
		return err
	}

	return nil
}

func (m *TransactionHistory) contextValidateTxnType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionHistory) UnmarshalBinary(b []byte) error {
	var res TransactionHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
