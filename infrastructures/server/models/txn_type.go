// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TxnType Transaction type
//
// swagger:model TxnType
type TxnType string

func NewTxnType(value TxnType) *TxnType {
	v := value
	return &v
}

const (

	// TxnTypeAuth captures enum value "auth"
	TxnTypeAuth TxnType = "auth"

	// TxnTypeCapture captures enum value "capture"
	TxnTypeCapture TxnType = "capture"

	// TxnTypeRefund captures enum value "refund"
	TxnTypeRefund TxnType = "refund"

	// TxnTypeSale captures enum value "sale"
	TxnTypeSale TxnType = "sale"

	// TxnTypeVoid captures enum value "void"
	TxnTypeVoid TxnType = "void"
)

// for schema
var txnTypeEnum []interface{}

func init() {
	var res []TxnType
	if err := json.Unmarshal([]byte(`["auth","capture","refund","sale","void"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		txnTypeEnum = append(txnTypeEnum, v)
	}
}

func (m TxnType) validateTxnTypeEnum(path, location string, value TxnType) error {
	if err := validate.EnumCase(path, location, value, txnTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this txn type
func (m TxnType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTxnTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this txn type based on context it is used
func (m TxnType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
