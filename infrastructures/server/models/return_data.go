// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnData return data
//
// swagger:model ReturnData
type ReturnData struct {

	// city
	City string `json:"city,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// pickup date, notation as per RFC 3339
	// Example: 2017-07-21T15:04:05Z
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// whole units travelled
	// Minimum: 0
	Distance int64 `json:"distance,omitempty"`

	// Unit used for `distance`:
	//   * m - miles
	//   * km - kilometres
	//
	// Enum: [m km]
	DistanceUnit string `json:"distanceUnit,omitempty"`

	// store location code
	Location string `json:"location,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this return data
func (m *ReturnData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistanceUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnData) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnData) validateDistance(formats strfmt.Registry) error {
	if swag.IsZero(m.Distance) { // not required
		return nil
	}

	if err := validate.MinimumInt("distance", "body", m.Distance, 0, false); err != nil {
		return err
	}

	return nil
}

var returnDataTypeDistanceUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["m","km"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		returnDataTypeDistanceUnitPropEnum = append(returnDataTypeDistanceUnitPropEnum, v)
	}
}

const (

	// ReturnDataDistanceUnitM captures enum value "m"
	ReturnDataDistanceUnitM string = "m"

	// ReturnDataDistanceUnitKm captures enum value "km"
	ReturnDataDistanceUnitKm string = "km"
)

// prop value enum
func (m *ReturnData) validateDistanceUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, returnDataTypeDistanceUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ReturnData) validateDistanceUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.DistanceUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateDistanceUnitEnum("distanceUnit", "body", m.DistanceUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this return data based on context it is used
func (m *ReturnData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReturnData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnData) UnmarshalBinary(b []byte) error {
	var res ReturnData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
