// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PickupData pickup data
//
// swagger:model PickupData
type PickupData struct {

	// city
	City string `json:"city,omitempty"`

	// country code
	CountryCode string `json:"countryCode,omitempty"`

	// pickup date, notation as per RFC 3339
	// Example: 2017-07-21T15:04:05Z
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// store location code
	Location string `json:"location,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this pickup data
func (m *PickupData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PickupData) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pickup data based on context it is used
func (m *PickupData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PickupData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PickupData) UnmarshalBinary(b []byte) error {
	var res PickupData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
