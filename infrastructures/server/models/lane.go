// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Lane lane
//
// swagger:model Lane
type Lane struct {

	// device description
	DeviceDescription DeviceDescription `json:"deviceDescription,omitempty"`

	// device Id
	DeviceID DeviceID `json:"deviceId,omitempty"`

	// device idle message
	DeviceIdleMessage DeviceIdleMessage `json:"deviceIdleMessage,omitempty"`

	// device model
	DeviceModel DeviceModel `json:"deviceModel,omitempty"`

	// device serial
	DeviceSerial DeviceSerial `json:"deviceSerial,omitempty"`

	// lane Id
	LaneID LaneID `json:"laneId,omitempty"`

	// processor
	Processor TxnProcessor `json:"processor,omitempty"`
}

// Validate validates this lane
func (m *Lane) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceIdleMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceSerial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lane) validateDeviceDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceDescription) { // not required
		return nil
	}

	if err := m.DeviceDescription.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceDescription")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceDescription")
		}
		return err
	}

	return nil
}

func (m *Lane) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := m.DeviceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Lane) validateDeviceIdleMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceIdleMessage) { // not required
		return nil
	}

	if err := m.DeviceIdleMessage.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIdleMessage")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIdleMessage")
		}
		return err
	}

	return nil
}

func (m *Lane) validateDeviceModel(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceModel) { // not required
		return nil
	}

	if err := m.DeviceModel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceModel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceModel")
		}
		return err
	}

	return nil
}

func (m *Lane) validateDeviceSerial(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceSerial) { // not required
		return nil
	}

	if err := m.DeviceSerial.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceSerial")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceSerial")
		}
		return err
	}

	return nil
}

func (m *Lane) validateLaneID(formats strfmt.Registry) error {
	if swag.IsZero(m.LaneID) { // not required
		return nil
	}

	if err := m.LaneID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laneId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("laneId")
		}
		return err
	}

	return nil
}

func (m *Lane) validateProcessor(formats strfmt.Registry) error {
	if swag.IsZero(m.Processor) { // not required
		return nil
	}

	if err := m.Processor.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processor")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processor")
		}
		return err
	}

	return nil
}

// ContextValidate validate this lane based on the context it is used
func (m *Lane) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceIdleMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceSerial(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaneID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lane) contextValidateDeviceDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceDescription.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceDescription")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceDescription")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateDeviceIdleMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceIdleMessage.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceIdleMessage")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceIdleMessage")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateDeviceModel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceModel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceModel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceModel")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateDeviceSerial(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceSerial.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceSerial")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceSerial")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateLaneID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LaneID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laneId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("laneId")
		}
		return err
	}

	return nil
}

func (m *Lane) contextValidateProcessor(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Processor.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processor")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processor")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lane) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lane) UnmarshalBinary(b []byte) error {
	var res Lane
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
