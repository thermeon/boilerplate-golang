// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LaneRequest lane request
//
// swagger:model LaneRequest
type LaneRequest struct {

	// activation code
	ActivationCode DeviceActivationCode `json:"activationCode,omitempty"`

	// device description
	DeviceDescription DeviceDescription `json:"deviceDescription,omitempty"`

	// device Id
	DeviceID DeviceID `json:"deviceId,omitempty"`

	// lane Id
	LaneID LaneID `json:"laneId,omitempty"`

	// location
	Location Location `json:"location,omitempty"`

	// processor
	Processor TxnProcessor `json:"processor,omitempty"`
}

// Validate validates this lane request
func (m *LaneRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LaneRequest) validateActivationCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivationCode) { // not required
		return nil
	}

	if err := m.ActivationCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("activationCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("activationCode")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) validateDeviceDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceDescription) { // not required
		return nil
	}

	if err := m.DeviceDescription.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceDescription")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceDescription")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := m.DeviceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) validateLaneID(formats strfmt.Registry) error {
	if swag.IsZero(m.LaneID) { // not required
		return nil
	}

	if err := m.LaneID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laneId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("laneId")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := m.Location.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) validateProcessor(formats strfmt.Registry) error {
	if swag.IsZero(m.Processor) { // not required
		return nil
	}

	if err := m.Processor.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processor")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processor")
		}
		return err
	}

	return nil
}

// ContextValidate validate this lane request based on the context it is used
func (m *LaneRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivationCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaneID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LaneRequest) contextValidateActivationCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ActivationCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("activationCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("activationCode")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) contextValidateDeviceDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceDescription.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceDescription")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceDescription")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) contextValidateLaneID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LaneID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laneId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("laneId")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Location.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *LaneRequest) contextValidateProcessor(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Processor.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processor")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("processor")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LaneRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LaneRequest) UnmarshalBinary(b []byte) error {
	var res LaneRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
