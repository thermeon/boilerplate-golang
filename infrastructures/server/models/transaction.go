// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction transaction
//
// swagger:model Transaction
type Transaction struct {

	// amount
	// Required: true
	Amount *Amount `json:"amount"`

	// auth code
	AuthCode AuthCode `json:"authCode,omitempty"`

	// authorized
	Authorized Authorized `json:"authorized,omitempty"`

	// cc cvc
	CcCvc CCCvc `json:"ccCvc,omitempty"`

	// cc cvc presence
	CcCvcPresence CCCvcPresence `json:"ccCvcPresence,omitempty"`

	// cc cvc res code
	CcCvcResCode CCCvcResultCode `json:"ccCvcResCode,omitempty"`

	// cc expire
	// Format: date
	CcExpire *CCExpire `json:"ccExpire,omitempty"`

	// cc holder name
	CcHolderName CCHolderName `json:"ccHolderName,omitempty"`

	// cc issue
	CcIssue CCIssue `json:"ccIssue,omitempty"`

	// cc number
	CcNumber CCNumber `json:"ccNumber,omitempty"`

	// cc start
	// Format: date
	CcStart *CCStart `json:"ccStart,omitempty"`

	// cc type
	CcType CCType `json:"ccType,omitempty"`

	// currency
	// Required: true
	Currency *Currency `json:"currency"`

	// dcc amount
	DccAmount Amount `json:"dccAmount,omitempty"`

	// dcc commission
	DccCommission Amount `json:"dccCommission,omitempty"`

	// dcc conversion rate
	DccConversionRate ConversionRate `json:"dccConversionRate,omitempty"`

	// dcc currency
	DccCurrency Currency `json:"dccCurrency,omitempty"`

	// dcc markup
	DccMarkup Amount `json:"dccMarkup,omitempty"`

	// device Id
	DeviceID DeviceID `json:"deviceId,omitempty"`

	// help text
	HelpText HelpText `json:"helpText,omitempty"`

	// location
	Location Location `json:"location,omitempty"`

	// merch name
	MerchName MerchantName `json:"merchName,omitempty"`

	// merch number
	MerchNumber MerchantNumber `json:"merchNumber,omitempty"`

	// merch ref
	MerchRef MerchantRef `json:"merchRef,omitempty"`

	// merch ref type
	MerchRefType MerchantRefType `json:"merchRefType,omitempty"`

	// merch user
	MerchUser MerchantUser `json:"merchUser,omitempty"`

	// opt lines
	OptLines []OptionLine `json:"optLines"`

	// options
	Options []*Option `json:"options"`

	// pos Id
	PosID POSID `json:"posId,omitempty"`

	// rebill token
	RebillToken RebillToken `json:"rebillToken,omitempty"`

	// receipt text
	ReceiptText ReceiptText `json:"receiptText,omitempty"`

	// receipt width
	ReceiptWidth ReceiptWidth `json:"receiptWidth,omitempty"`

	// resp code
	RespCode ResponseCode `json:"respCode,omitempty"`

	// resp text
	RespText ResponseText `json:"respText,omitempty"`

	// settle date
	// Format: date
	SettleDate *SettleDate `json:"settleDate,omitempty"`

	// txn complete
	// Required: true
	TxnComplete *TxnComplete `json:"txnComplete"`

	// txn date
	// Required: true
	// Format: date-time
	TxnDate *TxnDate `json:"txnDate"`

	// txn processor
	// Required: true
	TxnProcessor *TxnProcessor `json:"txnProcessor"`

	// txn ref
	// Required: true
	// Format: uuid
	TxnRef *TxnReference `json:"txnRef"`

	// txn ref ext
	TxnRefExt TxnReferenceExternal `json:"txnRefExt,omitempty"`

	// txn ref parent
	// Format: uuid
	TxnRefParent TxnReference `json:"txnRefParent,omitempty"`

	// txn type
	// Required: true
	TxnType *TxnType `json:"txnType"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcCvc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcCvcPresence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcCvcResCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcHolderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcIssue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDccAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDccCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDccConversionRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDccCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDccMarkup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelpText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRefType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebillToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiptText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiptWidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRespCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRespText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettleDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnComplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnProcessor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRefExt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRefParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateAuthCode(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthCode) { // not required
		return nil
	}

	if err := m.AuthCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.Authorized) { // not required
		return nil
	}

	if err := m.Authorized.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authorized")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authorized")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcCvc(formats strfmt.Registry) error {
	if swag.IsZero(m.CcCvc) { // not required
		return nil
	}

	if err := m.CcCvc.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvc")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvc")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcCvcPresence(formats strfmt.Registry) error {
	if swag.IsZero(m.CcCvcPresence) { // not required
		return nil
	}

	if err := m.CcCvcPresence.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcPresence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcPresence")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcCvcResCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CcCvcResCode) { // not required
		return nil
	}

	if err := m.CcCvcResCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcResCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcResCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcExpire(formats strfmt.Registry) error {
	if swag.IsZero(m.CcExpire) { // not required
		return nil
	}

	if m.CcExpire != nil {
		if err := m.CcExpire.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccExpire")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccExpire")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateCcHolderName(formats strfmt.Registry) error {
	if swag.IsZero(m.CcHolderName) { // not required
		return nil
	}

	if err := m.CcHolderName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccHolderName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccHolderName")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcIssue(formats strfmt.Registry) error {
	if swag.IsZero(m.CcIssue) { // not required
		return nil
	}

	if err := m.CcIssue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccIssue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccIssue")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.CcNumber) { // not required
		return nil
	}

	if err := m.CcNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccNumber")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCcStart(formats strfmt.Registry) error {
	if swag.IsZero(m.CcStart) { // not required
		return nil
	}

	if m.CcStart != nil {
		if err := m.CcStart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccStart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccStart")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateCcType(formats strfmt.Registry) error {
	if swag.IsZero(m.CcType) { // not required
		return nil
	}

	if err := m.CcType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccType")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateDccAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.DccAmount) { // not required
		return nil
	}

	if err := m.DccAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccAmount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccAmount")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateDccCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.DccCommission) { // not required
		return nil
	}

	if err := m.DccCommission.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccCommission")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccCommission")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateDccConversionRate(formats strfmt.Registry) error {
	if swag.IsZero(m.DccConversionRate) { // not required
		return nil
	}

	if err := m.DccConversionRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccConversionRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccConversionRate")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateDccCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.DccCurrency) { // not required
		return nil
	}

	if err := m.DccCurrency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccCurrency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccCurrency")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateDccMarkup(formats strfmt.Registry) error {
	if swag.IsZero(m.DccMarkup) { // not required
		return nil
	}

	if err := m.DccMarkup.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccMarkup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccMarkup")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := m.DeviceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateHelpText(formats strfmt.Registry) error {
	if swag.IsZero(m.HelpText) { // not required
		return nil
	}

	if err := m.HelpText.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("helpText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("helpText")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := m.Location.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMerchName(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchName) { // not required
		return nil
	}

	if err := m.MerchName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMerchNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchNumber) { // not required
		return nil
	}

	if err := m.MerchNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMerchRef(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRef) { // not required
		return nil
	}

	if err := m.MerchRef.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMerchRefType(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRefType) { // not required
		return nil
	}

	if err := m.MerchRefType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMerchUser(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchUser) { // not required
		return nil
	}

	if err := m.MerchUser.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateOptLines(formats strfmt.Registry) error {
	if swag.IsZero(m.OptLines) { // not required
		return nil
	}

	for i := 0; i < len(m.OptLines); i++ {

		if err := m.OptLines[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optLines" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optLines" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Transaction) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Transaction) validatePosID(formats strfmt.Registry) error {
	if swag.IsZero(m.PosID) { // not required
		return nil
	}

	if err := m.PosID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("posId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("posId")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateRebillToken(formats strfmt.Registry) error {
	if swag.IsZero(m.RebillToken) { // not required
		return nil
	}

	if err := m.RebillToken.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rebillToken")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rebillToken")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateReceiptText(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiptText) { // not required
		return nil
	}

	if err := m.ReceiptText.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiptText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiptText")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateReceiptWidth(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiptWidth) { // not required
		return nil
	}

	if err := m.ReceiptWidth.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiptWidth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiptWidth")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateRespCode(formats strfmt.Registry) error {
	if swag.IsZero(m.RespCode) { // not required
		return nil
	}

	if err := m.RespCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("respCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("respCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateRespText(formats strfmt.Registry) error {
	if swag.IsZero(m.RespText) { // not required
		return nil
	}

	if err := m.RespText.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("respText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("respText")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateSettleDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SettleDate) { // not required
		return nil
	}

	if m.SettleDate != nil {
		if err := m.SettleDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settleDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settleDate")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTxnComplete(formats strfmt.Registry) error {

	if err := validate.Required("txnComplete", "body", m.TxnComplete); err != nil {
		return err
	}

	if err := validate.Required("txnComplete", "body", m.TxnComplete); err != nil {
		return err
	}

	if m.TxnComplete != nil {
		if err := m.TxnComplete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnComplete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnComplete")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTxnDate(formats strfmt.Registry) error {

	if err := validate.Required("txnDate", "body", m.TxnDate); err != nil {
		return err
	}

	if err := validate.Required("txnDate", "body", m.TxnDate); err != nil {
		return err
	}

	if m.TxnDate != nil {
		if err := m.TxnDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnDate")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTxnProcessor(formats strfmt.Registry) error {

	if err := validate.Required("txnProcessor", "body", m.TxnProcessor); err != nil {
		return err
	}

	if err := validate.Required("txnProcessor", "body", m.TxnProcessor); err != nil {
		return err
	}

	if m.TxnProcessor != nil {
		if err := m.TxnProcessor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnProcessor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnProcessor")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTxnRef(formats strfmt.Registry) error {

	if err := validate.Required("txnRef", "body", m.TxnRef); err != nil {
		return err
	}

	if err := validate.Required("txnRef", "body", m.TxnRef); err != nil {
		return err
	}

	if m.TxnRef != nil {
		if err := m.TxnRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnRef")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTxnRefExt(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnRefExt) { // not required
		return nil
	}

	if err := m.TxnRefExt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefExt")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefExt")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateTxnRefParent(formats strfmt.Registry) error {
	if swag.IsZero(m.TxnRefParent) { // not required
		return nil
	}

	if err := m.TxnRefParent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefParent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefParent")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateTxnType(formats strfmt.Registry) error {

	if err := validate.Required("txnType", "body", m.TxnType); err != nil {
		return err
	}

	if err := validate.Required("txnType", "body", m.TxnType); err != nil {
		return err
	}

	if m.TxnType != nil {
		if err := m.TxnType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transaction based on the context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcCvc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcCvcPresence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcCvcResCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcExpire(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcHolderName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcIssue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcStart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDccAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDccCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDccConversionRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDccCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDccMarkup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHelpText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRefType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRebillToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiptText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceiptWidth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRespCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRespText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettleDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnComplete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnProcessor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRefExt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRefParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateAuthCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Authorized.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authorized")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authorized")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcCvc(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcCvc.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvc")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvc")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcCvcPresence(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcCvcPresence.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcPresence")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcPresence")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcCvcResCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcCvcResCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccCvcResCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccCvcResCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcExpire(ctx context.Context, formats strfmt.Registry) error {

	if m.CcExpire != nil {
		if err := m.CcExpire.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccExpire")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccExpire")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateCcHolderName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcHolderName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccHolderName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccHolderName")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcIssue(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcIssue.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccIssue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccIssue")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccNumber")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCcStart(ctx context.Context, formats strfmt.Registry) error {

	if m.CcStart != nil {
		if err := m.CcStart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ccStart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ccStart")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateCcType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CcType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ccType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ccType")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateDccAmount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DccAmount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccAmount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccAmount")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateDccCommission(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DccCommission.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccCommission")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccCommission")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateDccConversionRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DccConversionRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccConversionRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccConversionRate")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateDccCurrency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DccCurrency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccCurrency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccCurrency")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateDccMarkup(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DccMarkup.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dccMarkup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("dccMarkup")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateHelpText(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HelpText.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("helpText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("helpText")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Location.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMerchName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMerchNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMerchRef(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRef.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMerchRefType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRefType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMerchUser(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchUser.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateOptLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OptLines); i++ {

		if err := m.OptLines[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optLines" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optLines" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Transaction) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {
			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Transaction) contextValidatePosID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PosID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("posId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("posId")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateRebillToken(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RebillToken.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rebillToken")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rebillToken")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateReceiptText(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReceiptText.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiptText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiptText")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateReceiptWidth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReceiptWidth.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiptWidth")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("receiptWidth")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateRespCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RespCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("respCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("respCode")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateRespText(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RespText.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("respText")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("respText")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateSettleDate(ctx context.Context, formats strfmt.Registry) error {

	if m.SettleDate != nil {
		if err := m.SettleDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settleDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settleDate")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTxnComplete(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnComplete != nil {
		if err := m.TxnComplete.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnComplete")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnComplete")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTxnDate(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnDate != nil {
		if err := m.TxnDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnDate")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTxnProcessor(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnProcessor != nil {
		if err := m.TxnProcessor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnProcessor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnProcessor")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTxnRef(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnRef != nil {
		if err := m.TxnRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnRef")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTxnRefExt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnRefExt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefExt")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefExt")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateTxnRefParent(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TxnRefParent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("txnRefParent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("txnRefParent")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateTxnType(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnType != nil {
		if err := m.TxnType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
