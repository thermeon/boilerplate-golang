// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Modify modify
//
// swagger:model Modify
type Modify struct {

	// amount
	// Required: true
	Amount *Amount `json:"amount"`

	// currency
	// Required: true
	Currency *Currency `json:"currency"`

	// device Id
	DeviceID DeviceID `json:"deviceId,omitempty"`

	// location
	Location Location `json:"location,omitempty"`

	// merch name
	MerchName MerchantName `json:"merchName,omitempty"`

	// merch number
	MerchNumber MerchantNumber `json:"merchNumber,omitempty"`

	// merch ref
	MerchRef MerchantRef `json:"merchRef,omitempty"`

	// merch ref type
	MerchRefType MerchantRefType `json:"merchRefType,omitempty"`

	// merch user
	MerchUser MerchantUser `json:"merchUser,omitempty"`

	// pos Id
	PosID POSID `json:"posId,omitempty"`

	// rental detail
	RentalDetail *RentalDetail `json:"rentalDetail,omitempty"`

	// txn ref
	// Required: true
	// Format: uuid
	TxnRef *TxnReference `json:"txnRef"`
}

// Validate validates this modify
func (m *Modify) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchRefType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxnRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Modify) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if m.Currency != nil {
		if err := m.Currency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := m.DeviceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Modify) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if err := m.Location.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *Modify) validateMerchName(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchName) { // not required
		return nil
	}

	if err := m.MerchName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Modify) validateMerchNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchNumber) { // not required
		return nil
	}

	if err := m.MerchNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Modify) validateMerchRef(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRef) { // not required
		return nil
	}

	if err := m.MerchRef.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Modify) validateMerchRefType(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchRefType) { // not required
		return nil
	}

	if err := m.MerchRefType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Modify) validateMerchUser(formats strfmt.Registry) error {
	if swag.IsZero(m.MerchUser) { // not required
		return nil
	}

	if err := m.MerchUser.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Modify) validatePosID(formats strfmt.Registry) error {
	if swag.IsZero(m.PosID) { // not required
		return nil
	}

	if err := m.PosID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("posId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("posId")
		}
		return err
	}

	return nil
}

func (m *Modify) validateRentalDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalDetail) { // not required
		return nil
	}

	if m.RentalDetail != nil {
		if err := m.RentalDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rentalDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rentalDetail")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) validateTxnRef(formats strfmt.Registry) error {

	if err := validate.Required("txnRef", "body", m.TxnRef); err != nil {
		return err
	}

	if err := validate.Required("txnRef", "body", m.TxnRef); err != nil {
		return err
	}

	if m.TxnRef != nil {
		if err := m.TxnRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this modify based on the context it is used
func (m *Modify) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchRefType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMerchUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxnRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Modify) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) contextValidateCurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Currency != nil {
		if err := m.Currency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currency")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeviceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deviceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deviceId")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Location.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("location")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("location")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateMerchName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchName")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateMerchNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchNumber")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchNumber")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateMerchRef(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRef.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRef")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRef")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateMerchRefType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchRefType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchRefType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchRefType")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateMerchUser(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MerchUser.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("merchUser")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("merchUser")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidatePosID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PosID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("posId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("posId")
		}
		return err
	}

	return nil
}

func (m *Modify) contextValidateRentalDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.RentalDetail != nil {
		if err := m.RentalDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rentalDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rentalDetail")
			}
			return err
		}
	}

	return nil
}

func (m *Modify) contextValidateTxnRef(ctx context.Context, formats strfmt.Registry) error {

	if m.TxnRef != nil {
		if err := m.TxnRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("txnRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("txnRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Modify) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Modify) UnmarshalBinary(b []byte) error {
	var res Modify
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
