// Code generated by go-swagger; DO NOT EDIT.

package command

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/thermeon/boilerplate-golang/infrastructures/clients/triposlane/models"
)

// CommandCommandReader is a Reader for the CommandCommand structure.
type CommandCommandReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommandCommandReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommandCommandOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommandCommandBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCommandCommandUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommandCommandNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCommandCommandInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCommandCommandOK creates a CommandCommandOK with default headers values
func NewCommandCommandOK() *CommandCommandOK {
	return &CommandCommandOK{}
}

/* CommandCommandOK describes a response with status code 200, with default header values.

Valid request.
*/
type CommandCommandOK struct {
	Payload *models.LaneDto
}

func (o *CommandCommandOK) Error() string {
	return fmt.Sprintf("[POST /v1/lanes/{laneId}/command][%d] commandCommandOK  %+v", 200, o.Payload)
}
func (o *CommandCommandOK) GetPayload() *models.LaneDto {
	return o.Payload
}

func (o *CommandCommandOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LaneDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommandCommandBadRequest creates a CommandCommandBadRequest with default headers values
func NewCommandCommandBadRequest() *CommandCommandBadRequest {
	return &CommandCommandBadRequest{}
}

/* CommandCommandBadRequest describes a response with status code 400, with default header values.

Invalid fields on request.
*/
type CommandCommandBadRequest struct {
	Payload *models.ExceptionDto
}

func (o *CommandCommandBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/lanes/{laneId}/command][%d] commandCommandBadRequest  %+v", 400, o.Payload)
}
func (o *CommandCommandBadRequest) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *CommandCommandBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommandCommandUnauthorized creates a CommandCommandUnauthorized with default headers values
func NewCommandCommandUnauthorized() *CommandCommandUnauthorized {
	return &CommandCommandUnauthorized{}
}

/* CommandCommandUnauthorized describes a response with status code 401, with default header values.

Returned if the AcceptorId, AccountId, and AccountToken provided in the HTTP request header are invalid.
*/
type CommandCommandUnauthorized struct {
	Payload *models.ExceptionDto
}

func (o *CommandCommandUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/lanes/{laneId}/command][%d] commandCommandUnauthorized  %+v", 401, o.Payload)
}
func (o *CommandCommandUnauthorized) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *CommandCommandUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommandCommandNotFound creates a CommandCommandNotFound with default headers values
func NewCommandCommandNotFound() *CommandCommandNotFound {
	return &CommandCommandNotFound{}
}

/* CommandCommandNotFound describes a response with status code 404, with default header values.

Lane not found.
*/
type CommandCommandNotFound struct {
	Payload *models.ExceptionDto
}

func (o *CommandCommandNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/lanes/{laneId}/command][%d] commandCommandNotFound  %+v", 404, o.Payload)
}
func (o *CommandCommandNotFound) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *CommandCommandNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommandCommandInternalServerError creates a CommandCommandInternalServerError with default headers values
func NewCommandCommandInternalServerError() *CommandCommandInternalServerError {
	return &CommandCommandInternalServerError{}
}

/* CommandCommandInternalServerError describes a response with status code 500, with default header values.

Returned if an error occurred processing the request.
*/
type CommandCommandInternalServerError struct {
	Payload *models.ExceptionDto
}

func (o *CommandCommandInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/lanes/{laneId}/command][%d] commandCommandInternalServerError  %+v", 500, o.Payload)
}
func (o *CommandCommandInternalServerError) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *CommandCommandInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
