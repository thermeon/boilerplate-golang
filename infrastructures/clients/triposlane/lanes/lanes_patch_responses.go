// Code generated by go-swagger; DO NOT EDIT.

package lanes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/thermeon/boilerplate-golang/infrastructures/clients/triposlane/models"
)

// LanesPatchReader is a Reader for the LanesPatch structure.
type LanesPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LanesPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLanesPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLanesPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLanesPatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLanesPatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLanesPatchOK creates a LanesPatchOK with default headers values
func NewLanesPatchOK() *LanesPatchOK {
	return &LanesPatchOK{}
}

/* LanesPatchOK describes a response with status code 200, with default header values.

Valid request.
*/
type LanesPatchOK struct {
	Payload *models.LaneUpdateConfigurationResponse
}

func (o *LanesPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/lanes/{laneId}][%d] lanesPatchOK  %+v", 200, o.Payload)
}
func (o *LanesPatchOK) GetPayload() *models.LaneUpdateConfigurationResponse {
	return o.Payload
}

func (o *LanesPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LaneUpdateConfigurationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesPatchBadRequest creates a LanesPatchBadRequest with default headers values
func NewLanesPatchBadRequest() *LanesPatchBadRequest {
	return &LanesPatchBadRequest{}
}

/* LanesPatchBadRequest describes a response with status code 400, with default header values.

Invalid fields on request.
*/
type LanesPatchBadRequest struct {
	Payload *models.ExceptionDto
}

func (o *LanesPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/lanes/{laneId}][%d] lanesPatchBadRequest  %+v", 400, o.Payload)
}
func (o *LanesPatchBadRequest) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesPatchUnauthorized creates a LanesPatchUnauthorized with default headers values
func NewLanesPatchUnauthorized() *LanesPatchUnauthorized {
	return &LanesPatchUnauthorized{}
}

/* LanesPatchUnauthorized describes a response with status code 401, with default header values.

Returned if the AcceptorId, AccountId, and AccountToken provided in the HTTP request header are invalid.
*/
type LanesPatchUnauthorized struct {
	Payload *models.ExceptionDto
}

func (o *LanesPatchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/lanes/{laneId}][%d] lanesPatchUnauthorized  %+v", 401, o.Payload)
}
func (o *LanesPatchUnauthorized) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesPatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesPatchInternalServerError creates a LanesPatchInternalServerError with default headers values
func NewLanesPatchInternalServerError() *LanesPatchInternalServerError {
	return &LanesPatchInternalServerError{}
}

/* LanesPatchInternalServerError describes a response with status code 500, with default header values.

Returned if an error occurred processing the request.
*/
type LanesPatchInternalServerError struct {
	Payload *models.ExceptionDto
}

func (o *LanesPatchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/lanes/{laneId}][%d] lanesPatchInternalServerError  %+v", 500, o.Payload)
}
func (o *LanesPatchInternalServerError) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesPatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
