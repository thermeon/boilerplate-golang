// Code generated by go-swagger; DO NOT EDIT.

package lanes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/thermeon/boilerplate-golang/infrastructures/clients/triposlane/models"
)

// LanesGetReader is a Reader for the LanesGet structure.
type LanesGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LanesGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLanesGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLanesGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLanesGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLanesGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLanesGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLanesGetOK creates a LanesGetOK with default headers values
func NewLanesGetOK() *LanesGetOK {
	return &LanesGetOK{}
}

/* LanesGetOK describes a response with status code 200, with default header values.

Valid request.
*/
type LanesGetOK struct {
	Payload *models.LaneDto
}

func (o *LanesGetOK) Error() string {
	return fmt.Sprintf("[GET /v1/lanes/{laneId}][%d] lanesGetOK  %+v", 200, o.Payload)
}
func (o *LanesGetOK) GetPayload() *models.LaneDto {
	return o.Payload
}

func (o *LanesGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LaneDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesGetBadRequest creates a LanesGetBadRequest with default headers values
func NewLanesGetBadRequest() *LanesGetBadRequest {
	return &LanesGetBadRequest{}
}

/* LanesGetBadRequest describes a response with status code 400, with default header values.

Invalid fields on request.
*/
type LanesGetBadRequest struct {
	Payload *models.ExceptionDto
}

func (o *LanesGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/lanes/{laneId}][%d] lanesGetBadRequest  %+v", 400, o.Payload)
}
func (o *LanesGetBadRequest) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesGetUnauthorized creates a LanesGetUnauthorized with default headers values
func NewLanesGetUnauthorized() *LanesGetUnauthorized {
	return &LanesGetUnauthorized{}
}

/* LanesGetUnauthorized describes a response with status code 401, with default header values.

Returned if the AcceptorId, AccountId, and AccountToken provided in the HTTP request header are invalid.
*/
type LanesGetUnauthorized struct {
	Payload *models.ExceptionDto
}

func (o *LanesGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/lanes/{laneId}][%d] lanesGetUnauthorized  %+v", 401, o.Payload)
}
func (o *LanesGetUnauthorized) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesGetNotFound creates a LanesGetNotFound with default headers values
func NewLanesGetNotFound() *LanesGetNotFound {
	return &LanesGetNotFound{}
}

/* LanesGetNotFound describes a response with status code 404, with default header values.

Lane not found.
*/
type LanesGetNotFound struct {
	Payload *models.ExceptionDto
}

func (o *LanesGetNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/lanes/{laneId}][%d] lanesGetNotFound  %+v", 404, o.Payload)
}
func (o *LanesGetNotFound) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesGetInternalServerError creates a LanesGetInternalServerError with default headers values
func NewLanesGetInternalServerError() *LanesGetInternalServerError {
	return &LanesGetInternalServerError{}
}

/* LanesGetInternalServerError describes a response with status code 500, with default header values.

Returned if an error occurred processing the request.
*/
type LanesGetInternalServerError struct {
	Payload *models.ExceptionDto
}

func (o *LanesGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/lanes/{laneId}][%d] lanesGetInternalServerError  %+v", 500, o.Payload)
}
func (o *LanesGetInternalServerError) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
