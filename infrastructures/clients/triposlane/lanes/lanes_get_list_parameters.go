// Code generated by go-swagger; DO NOT EDIT.

package lanes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLanesGetListParams creates a new LanesGetListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLanesGetListParams() *LanesGetListParams {
	return &LanesGetListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLanesGetListParamsWithTimeout creates a new LanesGetListParams object
// with the ability to set a timeout on a request.
func NewLanesGetListParamsWithTimeout(timeout time.Duration) *LanesGetListParams {
	return &LanesGetListParams{
		timeout: timeout,
	}
}

// NewLanesGetListParamsWithContext creates a new LanesGetListParams object
// with the ability to set a context for a request.
func NewLanesGetListParamsWithContext(ctx context.Context) *LanesGetListParams {
	return &LanesGetListParams{
		Context: ctx,
	}
}

// NewLanesGetListParamsWithHTTPClient creates a new LanesGetListParams object
// with the ability to set a custom HTTPClient for a request.
func NewLanesGetListParamsWithHTTPClient(client *http.Client) *LanesGetListParams {
	return &LanesGetListParams{
		HTTPClient: client,
	}
}

/* LanesGetListParams contains all the parameters to send to the API endpoint
   for the lanes get list operation.

   Typically these are written to a http.Request.
*/
type LanesGetListParams struct {

	/* ContentType.

	   Content type for request.

	   Default: "application/json"
	*/
	ContentType string

	/* TpApplicationID.

	   The ID of the business application.
	*/
	TpApplicationID string

	/* TpApplicationName.

	   The name of the business application.
	*/
	TpApplicationName string

	/* TpApplicationVersion.

	   The version of the business application.
	*/
	TpApplicationVersion string

	/* TpExpressAcceptorID.

	   The Express acceptorId.
	*/
	TpExpressAcceptorID string

	/* TpExpressAccountID.

	   The Express accountId.
	*/
	TpExpressAccountID string

	/* TpExpressAccountToken.

	   The Express accountToken.
	*/
	TpExpressAccountToken string

	/* TpRequestID.

	   A unique ID for this request. This value should be a UUID or GUID.
	*/
	TpRequestID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the lanes get list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LanesGetListParams) WithDefaults() *LanesGetListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the lanes get list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LanesGetListParams) SetDefaults() {
	var (
		contentTypeDefault = string("application/json")
	)

	val := LanesGetListParams{
		ContentType: contentTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the lanes get list params
func (o *LanesGetListParams) WithTimeout(timeout time.Duration) *LanesGetListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the lanes get list params
func (o *LanesGetListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the lanes get list params
func (o *LanesGetListParams) WithContext(ctx context.Context) *LanesGetListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the lanes get list params
func (o *LanesGetListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the lanes get list params
func (o *LanesGetListParams) WithHTTPClient(client *http.Client) *LanesGetListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the lanes get list params
func (o *LanesGetListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the lanes get list params
func (o *LanesGetListParams) WithContentType(contentType string) *LanesGetListParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the lanes get list params
func (o *LanesGetListParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithTpApplicationID adds the tpApplicationID to the lanes get list params
func (o *LanesGetListParams) WithTpApplicationID(tpApplicationID string) *LanesGetListParams {
	o.SetTpApplicationID(tpApplicationID)
	return o
}

// SetTpApplicationID adds the tpApplicationId to the lanes get list params
func (o *LanesGetListParams) SetTpApplicationID(tpApplicationID string) {
	o.TpApplicationID = tpApplicationID
}

// WithTpApplicationName adds the tpApplicationName to the lanes get list params
func (o *LanesGetListParams) WithTpApplicationName(tpApplicationName string) *LanesGetListParams {
	o.SetTpApplicationName(tpApplicationName)
	return o
}

// SetTpApplicationName adds the tpApplicationName to the lanes get list params
func (o *LanesGetListParams) SetTpApplicationName(tpApplicationName string) {
	o.TpApplicationName = tpApplicationName
}

// WithTpApplicationVersion adds the tpApplicationVersion to the lanes get list params
func (o *LanesGetListParams) WithTpApplicationVersion(tpApplicationVersion string) *LanesGetListParams {
	o.SetTpApplicationVersion(tpApplicationVersion)
	return o
}

// SetTpApplicationVersion adds the tpApplicationVersion to the lanes get list params
func (o *LanesGetListParams) SetTpApplicationVersion(tpApplicationVersion string) {
	o.TpApplicationVersion = tpApplicationVersion
}

// WithTpExpressAcceptorID adds the tpExpressAcceptorID to the lanes get list params
func (o *LanesGetListParams) WithTpExpressAcceptorID(tpExpressAcceptorID string) *LanesGetListParams {
	o.SetTpExpressAcceptorID(tpExpressAcceptorID)
	return o
}

// SetTpExpressAcceptorID adds the tpExpressAcceptorId to the lanes get list params
func (o *LanesGetListParams) SetTpExpressAcceptorID(tpExpressAcceptorID string) {
	o.TpExpressAcceptorID = tpExpressAcceptorID
}

// WithTpExpressAccountID adds the tpExpressAccountID to the lanes get list params
func (o *LanesGetListParams) WithTpExpressAccountID(tpExpressAccountID string) *LanesGetListParams {
	o.SetTpExpressAccountID(tpExpressAccountID)
	return o
}

// SetTpExpressAccountID adds the tpExpressAccountId to the lanes get list params
func (o *LanesGetListParams) SetTpExpressAccountID(tpExpressAccountID string) {
	o.TpExpressAccountID = tpExpressAccountID
}

// WithTpExpressAccountToken adds the tpExpressAccountToken to the lanes get list params
func (o *LanesGetListParams) WithTpExpressAccountToken(tpExpressAccountToken string) *LanesGetListParams {
	o.SetTpExpressAccountToken(tpExpressAccountToken)
	return o
}

// SetTpExpressAccountToken adds the tpExpressAccountToken to the lanes get list params
func (o *LanesGetListParams) SetTpExpressAccountToken(tpExpressAccountToken string) {
	o.TpExpressAccountToken = tpExpressAccountToken
}

// WithTpRequestID adds the tpRequestID to the lanes get list params
func (o *LanesGetListParams) WithTpRequestID(tpRequestID string) *LanesGetListParams {
	o.SetTpRequestID(tpRequestID)
	return o
}

// SetTpRequestID adds the tpRequestId to the lanes get list params
func (o *LanesGetListParams) SetTpRequestID(tpRequestID string) {
	o.TpRequestID = tpRequestID
}

// WriteToRequest writes these params to a swagger request
func (o *LanesGetListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	// header param tp-application-id
	if err := r.SetHeaderParam("tp-application-id", o.TpApplicationID); err != nil {
		return err
	}

	// header param tp-application-name
	if err := r.SetHeaderParam("tp-application-name", o.TpApplicationName); err != nil {
		return err
	}

	// header param tp-application-version
	if err := r.SetHeaderParam("tp-application-version", o.TpApplicationVersion); err != nil {
		return err
	}

	// header param tp-express-acceptor-id
	if err := r.SetHeaderParam("tp-express-acceptor-id", o.TpExpressAcceptorID); err != nil {
		return err
	}

	// header param tp-express-account-id
	if err := r.SetHeaderParam("tp-express-account-id", o.TpExpressAccountID); err != nil {
		return err
	}

	// header param tp-express-account-token
	if err := r.SetHeaderParam("tp-express-account-token", o.TpExpressAccountToken); err != nil {
		return err
	}

	// header param tp-request-id
	if err := r.SetHeaderParam("tp-request-id", o.TpRequestID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
