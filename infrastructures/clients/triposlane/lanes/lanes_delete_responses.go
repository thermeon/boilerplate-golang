// Code generated by go-swagger; DO NOT EDIT.

package lanes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/thermeon/boilerplate-golang/infrastructures/clients/triposlane/models"
)

// LanesDeleteReader is a Reader for the LanesDelete structure.
type LanesDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LanesDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLanesDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLanesDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLanesDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLanesDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLanesDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLanesDeleteOK creates a LanesDeleteOK with default headers values
func NewLanesDeleteOK() *LanesDeleteOK {
	return &LanesDeleteOK{}
}

/* LanesDeleteOK describes a response with status code 200, with default header values.

Valid request.
*/
type LanesDeleteOK struct {
}

func (o *LanesDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/lanes/{laneId}][%d] lanesDeleteOK ", 200)
}

func (o *LanesDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLanesDeleteBadRequest creates a LanesDeleteBadRequest with default headers values
func NewLanesDeleteBadRequest() *LanesDeleteBadRequest {
	return &LanesDeleteBadRequest{}
}

/* LanesDeleteBadRequest describes a response with status code 400, with default header values.

Invalid fields on request.
*/
type LanesDeleteBadRequest struct {
	Payload *models.ExceptionDto
}

func (o *LanesDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/lanes/{laneId}][%d] lanesDeleteBadRequest  %+v", 400, o.Payload)
}
func (o *LanesDeleteBadRequest) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesDeleteUnauthorized creates a LanesDeleteUnauthorized with default headers values
func NewLanesDeleteUnauthorized() *LanesDeleteUnauthorized {
	return &LanesDeleteUnauthorized{}
}

/* LanesDeleteUnauthorized describes a response with status code 401, with default header values.

Returned if the AcceptorId, AccountId, and AccountToken provided in the HTTP request header are invalid.
*/
type LanesDeleteUnauthorized struct {
	Payload *models.ExceptionDto
}

func (o *LanesDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/lanes/{laneId}][%d] lanesDeleteUnauthorized  %+v", 401, o.Payload)
}
func (o *LanesDeleteUnauthorized) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesDeleteNotFound creates a LanesDeleteNotFound with default headers values
func NewLanesDeleteNotFound() *LanesDeleteNotFound {
	return &LanesDeleteNotFound{}
}

/* LanesDeleteNotFound describes a response with status code 404, with default header values.

Lane not found.
*/
type LanesDeleteNotFound struct {
	Payload *models.ExceptionDto
}

func (o *LanesDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/lanes/{laneId}][%d] lanesDeleteNotFound  %+v", 404, o.Payload)
}
func (o *LanesDeleteNotFound) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLanesDeleteInternalServerError creates a LanesDeleteInternalServerError with default headers values
func NewLanesDeleteInternalServerError() *LanesDeleteInternalServerError {
	return &LanesDeleteInternalServerError{}
}

/* LanesDeleteInternalServerError describes a response with status code 500, with default header values.

Returned if an error occurred processing the request.
*/
type LanesDeleteInternalServerError struct {
	Payload *models.ExceptionDto
}

func (o *LanesDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/lanes/{laneId}][%d] lanesDeleteInternalServerError  %+v", 500, o.Payload)
}
func (o *LanesDeleteInternalServerError) GetPayload() *models.ExceptionDto {
	return o.Payload
}

func (o *LanesDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ExceptionDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
