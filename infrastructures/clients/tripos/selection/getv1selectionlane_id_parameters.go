// Code generated by go-swagger; DO NOT EDIT.

package selection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetv1selectionlaneIDParams creates a new Getv1selectionlaneIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetv1selectionlaneIDParams() *Getv1selectionlaneIDParams {
	return &Getv1selectionlaneIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetv1selectionlaneIDParamsWithTimeout creates a new Getv1selectionlaneIDParams object
// with the ability to set a timeout on a request.
func NewGetv1selectionlaneIDParamsWithTimeout(timeout time.Duration) *Getv1selectionlaneIDParams {
	return &Getv1selectionlaneIDParams{
		timeout: timeout,
	}
}

// NewGetv1selectionlaneIDParamsWithContext creates a new Getv1selectionlaneIDParams object
// with the ability to set a context for a request.
func NewGetv1selectionlaneIDParamsWithContext(ctx context.Context) *Getv1selectionlaneIDParams {
	return &Getv1selectionlaneIDParams{
		Context: ctx,
	}
}

// NewGetv1selectionlaneIDParamsWithHTTPClient creates a new Getv1selectionlaneIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetv1selectionlaneIDParamsWithHTTPClient(client *http.Client) *Getv1selectionlaneIDParams {
	return &Getv1selectionlaneIDParams{
		HTTPClient: client,
	}
}

/* Getv1selectionlaneIDParams contains all the parameters to send to the API endpoint
   for the getv1selectionlane Id operation.

   Typically these are written to a http.Request.
*/
type Getv1selectionlaneIDParams struct {

	/* ContentType.

	   Content type for request.

	   Default: "application/json"
	*/
	ContentType string

	/* Form.

	   The selection form to display. <a href='https://triposcert.vantiv.com/api/help/kb/selection.html'>more&raquo;</a>
	*/
	Form string

	/* Header.

	   The header text to display to the cardholder. This is only used for the YesNoTextArea or MultiOptionTextArea form.
	*/
	Header *string

	/* LaneID.

	   The lane ID.
	*/
	LaneID string

	/* MultiLineText.

	   The list of individual lines of text to be displayed on the PIN pad. Separate each text with a pipe '|' (e.g. multiLineText=promptLine1|promptLine2). For the MultiOption form, this is the prompt text.
	*/
	MultiLineText *string

	/* Options.

	   The selection options to provide to the cardholder. Separate each option with a pipe '|' (e.g. options=one|two|three). This is only used with the MultiOption and MultiOptionTextArea forms.
	*/
	Options *string

	/* SubHeader.

	   The subheader text to display to the cardholder. This is only used for the YesNoTextArea or MultiOptionTextArea form.
	*/
	SubHeader *string

	/* Text.

	   The text to display to the cardholder. For the MultiOption form, this is the prompt text. For the YesNoTextArea form, this is the text for the text area. Use | (pipe) for newline.
	*/
	Text *string

	/* TpApplicationID.

	   The ID of the business application.
	*/
	TpApplicationID string

	/* TpApplicationName.

	   The name of the business application.
	*/
	TpApplicationName string

	/* TpApplicationVersion.

	   The version of the business application.
	*/
	TpApplicationVersion string

	/* TpAuthorization.

	   The authorization header.
	*/
	TpAuthorization string

	/* TpExpressAcceptorID.

	   The Express acceptorId. If all three Express credentials are specified in the request headers, triPOS will use these credentials instead of the credentials in the triPOS.config for that request only.
	*/
	TpExpressAcceptorID string

	/* TpExpressAccountID.

	   The Express accountId. If all three Express credentials are specified in the request headers, triPOS will use these credentials instead of the credentials in the triPOS.config for that request only.
	*/
	TpExpressAccountID string

	/* TpExpressAccountToken.

	   The Express accountToken. If all three Express credentials are specified in the request headers, triPOS will use these credentials instead of the credentials in the triPOS.config for that request only.
	*/
	TpExpressAccountToken string

	/* TpRequestID.

	   A unique ID for this request. This value should be a UUID or GUID. <a href='https://triposcert.vantiv.com/api/help/kb/requestid.html'>more&raquo;</a>
	*/
	TpRequestID string

	/* TpReturnLogs.

	   Set to true to have logs populated in the response.
	*/
	TpReturnLogs *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the getv1selectionlane Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Getv1selectionlaneIDParams) WithDefaults() *Getv1selectionlaneIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the getv1selectionlane Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *Getv1selectionlaneIDParams) SetDefaults() {
	var (
		contentTypeDefault = string("application/json")
	)

	val := Getv1selectionlaneIDParams{
		ContentType: contentTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTimeout(timeout time.Duration) *Getv1selectionlaneIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithContext(ctx context.Context) *Getv1selectionlaneIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithHTTPClient(client *http.Client) *Getv1selectionlaneIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithContentType(contentType string) *Getv1selectionlaneIDParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithForm adds the form to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithForm(form string) *Getv1selectionlaneIDParams {
	o.SetForm(form)
	return o
}

// SetForm adds the form to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetForm(form string) {
	o.Form = form
}

// WithHeader adds the header to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithHeader(header *string) *Getv1selectionlaneIDParams {
	o.SetHeader(header)
	return o
}

// SetHeader adds the header to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetHeader(header *string) {
	o.Header = header
}

// WithLaneID adds the laneID to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithLaneID(laneID string) *Getv1selectionlaneIDParams {
	o.SetLaneID(laneID)
	return o
}

// SetLaneID adds the laneId to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetLaneID(laneID string) {
	o.LaneID = laneID
}

// WithMultiLineText adds the multiLineText to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithMultiLineText(multiLineText *string) *Getv1selectionlaneIDParams {
	o.SetMultiLineText(multiLineText)
	return o
}

// SetMultiLineText adds the multiLineText to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetMultiLineText(multiLineText *string) {
	o.MultiLineText = multiLineText
}

// WithOptions adds the options to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithOptions(options *string) *Getv1selectionlaneIDParams {
	o.SetOptions(options)
	return o
}

// SetOptions adds the options to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetOptions(options *string) {
	o.Options = options
}

// WithSubHeader adds the subHeader to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithSubHeader(subHeader *string) *Getv1selectionlaneIDParams {
	o.SetSubHeader(subHeader)
	return o
}

// SetSubHeader adds the subHeader to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetSubHeader(subHeader *string) {
	o.SubHeader = subHeader
}

// WithText adds the text to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithText(text *string) *Getv1selectionlaneIDParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetText(text *string) {
	o.Text = text
}

// WithTpApplicationID adds the tpApplicationID to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpApplicationID(tpApplicationID string) *Getv1selectionlaneIDParams {
	o.SetTpApplicationID(tpApplicationID)
	return o
}

// SetTpApplicationID adds the tpApplicationId to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpApplicationID(tpApplicationID string) {
	o.TpApplicationID = tpApplicationID
}

// WithTpApplicationName adds the tpApplicationName to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpApplicationName(tpApplicationName string) *Getv1selectionlaneIDParams {
	o.SetTpApplicationName(tpApplicationName)
	return o
}

// SetTpApplicationName adds the tpApplicationName to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpApplicationName(tpApplicationName string) {
	o.TpApplicationName = tpApplicationName
}

// WithTpApplicationVersion adds the tpApplicationVersion to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpApplicationVersion(tpApplicationVersion string) *Getv1selectionlaneIDParams {
	o.SetTpApplicationVersion(tpApplicationVersion)
	return o
}

// SetTpApplicationVersion adds the tpApplicationVersion to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpApplicationVersion(tpApplicationVersion string) {
	o.TpApplicationVersion = tpApplicationVersion
}

// WithTpAuthorization adds the tpAuthorization to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpAuthorization(tpAuthorization string) *Getv1selectionlaneIDParams {
	o.SetTpAuthorization(tpAuthorization)
	return o
}

// SetTpAuthorization adds the tpAuthorization to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpAuthorization(tpAuthorization string) {
	o.TpAuthorization = tpAuthorization
}

// WithTpExpressAcceptorID adds the tpExpressAcceptorID to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpExpressAcceptorID(tpExpressAcceptorID string) *Getv1selectionlaneIDParams {
	o.SetTpExpressAcceptorID(tpExpressAcceptorID)
	return o
}

// SetTpExpressAcceptorID adds the tpExpressAcceptorId to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpExpressAcceptorID(tpExpressAcceptorID string) {
	o.TpExpressAcceptorID = tpExpressAcceptorID
}

// WithTpExpressAccountID adds the tpExpressAccountID to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpExpressAccountID(tpExpressAccountID string) *Getv1selectionlaneIDParams {
	o.SetTpExpressAccountID(tpExpressAccountID)
	return o
}

// SetTpExpressAccountID adds the tpExpressAccountId to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpExpressAccountID(tpExpressAccountID string) {
	o.TpExpressAccountID = tpExpressAccountID
}

// WithTpExpressAccountToken adds the tpExpressAccountToken to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpExpressAccountToken(tpExpressAccountToken string) *Getv1selectionlaneIDParams {
	o.SetTpExpressAccountToken(tpExpressAccountToken)
	return o
}

// SetTpExpressAccountToken adds the tpExpressAccountToken to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpExpressAccountToken(tpExpressAccountToken string) {
	o.TpExpressAccountToken = tpExpressAccountToken
}

// WithTpRequestID adds the tpRequestID to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpRequestID(tpRequestID string) *Getv1selectionlaneIDParams {
	o.SetTpRequestID(tpRequestID)
	return o
}

// SetTpRequestID adds the tpRequestId to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpRequestID(tpRequestID string) {
	o.TpRequestID = tpRequestID
}

// WithTpReturnLogs adds the tpReturnLogs to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) WithTpReturnLogs(tpReturnLogs *bool) *Getv1selectionlaneIDParams {
	o.SetTpReturnLogs(tpReturnLogs)
	return o
}

// SetTpReturnLogs adds the tpReturnLogs to the getv1selectionlane Id params
func (o *Getv1selectionlaneIDParams) SetTpReturnLogs(tpReturnLogs *bool) {
	o.TpReturnLogs = tpReturnLogs
}

// WriteToRequest writes these params to a swagger request
func (o *Getv1selectionlaneIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	// query param form
	qrForm := o.Form
	qForm := qrForm
	if qForm != "" {

		if err := r.SetQueryParam("form", qForm); err != nil {
			return err
		}
	}

	if o.Header != nil {

		// query param header
		var qrHeader string

		if o.Header != nil {
			qrHeader = *o.Header
		}
		qHeader := qrHeader
		if qHeader != "" {

			if err := r.SetQueryParam("header", qHeader); err != nil {
				return err
			}
		}
	}

	// path param laneId
	if err := r.SetPathParam("laneId", o.LaneID); err != nil {
		return err
	}

	if o.MultiLineText != nil {

		// query param multiLineText
		var qrMultiLineText string

		if o.MultiLineText != nil {
			qrMultiLineText = *o.MultiLineText
		}
		qMultiLineText := qrMultiLineText
		if qMultiLineText != "" {

			if err := r.SetQueryParam("multiLineText", qMultiLineText); err != nil {
				return err
			}
		}
	}

	if o.Options != nil {

		// query param options
		var qrOptions string

		if o.Options != nil {
			qrOptions = *o.Options
		}
		qOptions := qrOptions
		if qOptions != "" {

			if err := r.SetQueryParam("options", qOptions); err != nil {
				return err
			}
		}
	}

	if o.SubHeader != nil {

		// query param subHeader
		var qrSubHeader string

		if o.SubHeader != nil {
			qrSubHeader = *o.SubHeader
		}
		qSubHeader := qrSubHeader
		if qSubHeader != "" {

			if err := r.SetQueryParam("subHeader", qSubHeader); err != nil {
				return err
			}
		}
	}

	if o.Text != nil {

		// query param text
		var qrText string

		if o.Text != nil {
			qrText = *o.Text
		}
		qText := qrText
		if qText != "" {

			if err := r.SetQueryParam("text", qText); err != nil {
				return err
			}
		}
	}

	// header param tp-application-id
	if err := r.SetHeaderParam("tp-application-id", o.TpApplicationID); err != nil {
		return err
	}

	// header param tp-application-name
	if err := r.SetHeaderParam("tp-application-name", o.TpApplicationName); err != nil {
		return err
	}

	// header param tp-application-version
	if err := r.SetHeaderParam("tp-application-version", o.TpApplicationVersion); err != nil {
		return err
	}

	// header param tp-authorization
	if err := r.SetHeaderParam("tp-authorization", o.TpAuthorization); err != nil {
		return err
	}

	// header param tp-express-acceptor-id
	if err := r.SetHeaderParam("tp-express-acceptor-id", o.TpExpressAcceptorID); err != nil {
		return err
	}

	// header param tp-express-account-id
	if err := r.SetHeaderParam("tp-express-account-id", o.TpExpressAccountID); err != nil {
		return err
	}

	// header param tp-express-account-token
	if err := r.SetHeaderParam("tp-express-account-token", o.TpExpressAccountToken); err != nil {
		return err
	}

	// header param tp-request-id
	if err := r.SetHeaderParam("tp-request-id", o.TpRequestID); err != nil {
		return err
	}

	if o.TpReturnLogs != nil {

		// header param tp-return-logs
		if err := r.SetHeaderParam("tp-return-logs", swag.FormatBool(*o.TpReturnLogs)); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
