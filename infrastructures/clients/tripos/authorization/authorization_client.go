// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authorization API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authorization API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Postv1authorization(params *Postv1authorizationParams, opts ...ClientOption) (*Postv1authorizationOK, error)

	Postv1authorizationpaymentAccountID(params *Postv1authorizationpaymentAccountIDParams, opts ...ClientOption) (*Postv1authorizationpaymentAccountIDOK, error)

	Postv1authorizationtoken(params *Postv1authorizationtokenParams, opts ...ClientOption) (*Postv1authorizationtokenOK, error)

	Postv1authorizationtransactionIdcompletion(params *Postv1authorizationtransactionIdcompletionParams, opts ...ClientOption) (*Postv1authorizationtransactionIdcompletionOK, error)

	Postv1authorizationtransactionIdincremental(params *Postv1authorizationtransactionIdincrementalParams, opts ...ClientOption) (*Postv1authorizationtransactionIdincrementalOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Postv1authorization creates a new card authorization based on the passed in parameters

  This creates a transaction used to hold funds when the total amount of the purchase is unknown. The Incremental Authorization HATEAOS link is only supported for AutoRental and HotelLodging. Additionally, this endpoint supports QuickChip/PreRead functionality. See <a href='https://triposcert.vantiv.com/api/help/kb/cloud/QuickChipConfiguration.html'> QuickChip/PreRead documentation</a> for more information.
*/
func (a *Client) Postv1authorization(params *Postv1authorizationParams, opts ...ClientOption) (*Postv1authorizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1authorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1authorization",
		Method:             "POST",
		PathPattern:        "/api/v1/authorization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1authorizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1authorizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1authorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1authorizationpaymentAccountID creates a new payment account authorization based on the passed in amounts
*/
func (a *Client) Postv1authorizationpaymentAccountID(params *Postv1authorizationpaymentAccountIDParams, opts ...ClientOption) (*Postv1authorizationpaymentAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1authorizationpaymentAccountIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1authorizationpaymentAccountId",
		Method:             "POST",
		PathPattern:        "/api/v1/authorization/{paymentAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1authorizationpaymentAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1authorizationpaymentAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1authorizationpaymentAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1authorizationtoken creates a new card authorization using a token based on the passed in amounts

  See <a href='https://triposcert.vantiv.com/api/help/kb/omniToken.html'>OmniToken documentation</a> for more information.
*/
func (a *Client) Postv1authorizationtoken(params *Postv1authorizationtokenParams, opts ...ClientOption) (*Postv1authorizationtokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1authorizationtokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1authorizationtoken",
		Method:             "POST",
		PathPattern:        "/api/v1/authorization/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1authorizationtokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1authorizationtokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1authorizationtoken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1authorizationtransactionIdcompletion updates a previous card authorization with the final totals

  This completes the original authorization and initiates and exchange of funds. The transactionId is the value returned by the original authorization.
*/
func (a *Client) Postv1authorizationtransactionIdcompletion(params *Postv1authorizationtransactionIdcompletionParams, opts ...ClientOption) (*Postv1authorizationtransactionIdcompletionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1authorizationtransactionIdcompletionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1authorizationtransactionIdcompletion",
		Method:             "POST",
		PathPattern:        "/api/v1/authorization/{transactionId}/completion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1authorizationtransactionIdcompletionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1authorizationtransactionIdcompletionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1authorizationtransactionIdcompletion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1authorizationtransactionIdincremental increases a previous card authorization by the given transaction amount

  This increments the original authorization by the given transactionAmount. The transactionId is the value returned by the original authorization. <a href='https://triposcert.vantiv.com/api/help/kb/incrementalAuth.html'>More&raquo;</a>
*/
func (a *Client) Postv1authorizationtransactionIdincremental(params *Postv1authorizationtransactionIdincrementalParams, opts ...ClientOption) (*Postv1authorizationtransactionIdincrementalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1authorizationtransactionIdincrementalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1authorizationtransactionIdincremental",
		Method:             "POST",
		PathPattern:        "/api/v1/authorization/{transactionId}/incremental",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1authorizationtransactionIdincrementalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1authorizationtransactionIdincrementalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1authorizationtransactionIdincremental: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
