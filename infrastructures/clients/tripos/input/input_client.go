// Code generated by go-swagger; DO NOT EDIT.

package input

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new input API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for input API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Getv1inputlaneID(params *Getv1inputlaneIDParams, opts ...ClientOption) (*Getv1inputlaneIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Getv1inputlaneID displays the prompt associated to the prompt type and accepts input text from the card holder

  Use the input endpoint to prompt the cardholder for input. This endpoint returns an HTTP status code of 200 if the cardholder pressed the ok or cancel button. See <a href='https://triposcert.vantiv.com/api/help/kb/input.html'>input documentation</a> for more information.
*/
func (a *Client) Getv1inputlaneID(params *Getv1inputlaneIDParams, opts ...ClientOption) (*Getv1inputlaneIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetv1inputlaneIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getv1inputlaneId",
		Method:             "GET",
		PathPattern:        "/api/v1/input/{laneId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Getv1inputlaneIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Getv1inputlaneIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getv1inputlaneId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
