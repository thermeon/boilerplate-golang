// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID UpdatePaymentAccountCreditRequest
//
// swagger:model PUT_UpdatePaymentAccountCreditRequest_v1_paymentAccount_paymentAccountId
type PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID struct {

	// The cardholder address information for the transaction.
	Address *PUTAddressV1PaymentAccountPaymentAccountID `json:"address,omitempty"`

	// The expiration month.
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// The expiration year.
	ExpirationYear string `json:"expirationYear,omitempty"`

	//  Invokes manual card entry.
	InvokeManualEntry bool `json:"invokeManualEntry,omitempty"`

	// The Lane ID.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// The payment account reference number
	// Required: true
	PaymentAccountReferenceNumber *string `json:"paymentAccountReferenceNumber"`

	// The value that is passed in for UpdateCardData. Should be true or false.
	// Required: true
	UpdateCardData *bool `json:"updateCardData"`
}

// Validate validates this p u t update payment account credit request v1 payment account payment account Id
func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAccountReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateCardData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) validatePaymentAccountReferenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("paymentAccountReferenceNumber", "body", m.PaymentAccountReferenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) validateUpdateCardData(formats strfmt.Registry) error {

	if err := validate.Required("updateCardData", "body", m.UpdateCardData); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p u t update payment account credit request v1 payment account payment account Id based on the context it is used
func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID) UnmarshalBinary(b []byte) error {
	var res PUTUpdatePaymentAccountCreditRequestV1PaymentAccountPaymentAccountID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
