// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// POSTDisplayRequestV1Display DisplayRequest
//
// swagger:model POST_DisplayRequest_v1_display
type POSTDisplayRequestV1Display struct {

	// The lane ID.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// The list of individual lines of text to be displayed on the PIN pad. Only some PIN pads support multi-line display. The maximum number of lines and characters per line varies among PIN pads. Please test the multi-line text with the desired PIN pad to make sure it is displayed as expected. <a href='https://triposcert.vantiv.com/api/help/kb/display.html'>More&raquo</a>
	MultiLineText []string `json:"multiLineText"`

	// The full text to display on the PIN pad. triPOS may split the text into multiple lines based on the size of the PIN pad's screen. Please test the text with the desired PIN pad to make sure it is displayed as expected. <a href='https://triposcert.vantiv.com/api/help/kb/display.html'>More&raquo</a>
	Text string `json:"text,omitempty"`
}

// Validate validates this p o s t display request v1 display
func (m *POSTDisplayRequestV1Display) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTDisplayRequestV1Display) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this p o s t display request v1 display based on context it is used
func (m *POSTDisplayRequestV1Display) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *POSTDisplayRequestV1Display) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTDisplayRequestV1Display) UnmarshalBinary(b []byte) error {
	var res POSTDisplayRequestV1Display
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
