// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FinancialCard FinancialCard
//
// swagger:model FinancialCard
type FinancialCard struct {

	// The card account number.
	AccountNumber string `json:"accountNumber,omitempty"`

	// The BIN entry that matched the account number.
	BinValue string `json:"binValue,omitempty"`

	// Card entry mode
	CardEntryMode string `json:"cardEntryMode,omitempty"`

	// Brand of the card. Possible values include: Visa, Mastercard, Discover
	CardLogo string `json:"cardLogo,omitempty"`

	// The name of the cardholder as printed on the front of the card
	CardholderName string `json:"cardholderName,omitempty"`

	// The encrypted card data
	EncryptedCardData *EncryptedCardData `json:"encryptedCardData,omitempty"`

	// The card's expiration month
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// The card's expiration year
	ExpirationYear string `json:"expirationYear,omitempty"`
}

// Validate validates this financial card
func (m *FinancialCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptedCardData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FinancialCard) validateEncryptedCardData(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptedCardData) { // not required
		return nil
	}

	if m.EncryptedCardData != nil {
		if err := m.EncryptedCardData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptedCardData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptedCardData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this financial card based on the context it is used
func (m *FinancialCard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncryptedCardData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FinancialCard) contextValidateEncryptedCardData(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptedCardData != nil {
		if err := m.EncryptedCardData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptedCardData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptedCardData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FinancialCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FinancialCard) UnmarshalBinary(b []byte) error {
	var res FinancialCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
