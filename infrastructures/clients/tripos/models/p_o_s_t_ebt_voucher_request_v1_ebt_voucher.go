// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// POSTEbtVoucherRequestV1EbtVoucher EbtVoucherRequest
//
// swagger:model POST_EbtVoucherRequest_v1_ebtVoucher
type POSTEbtVoucherRequestV1EbtVoucher struct {

	// The approval number of a voice authorization
	// Required: true
	ApprovalNumber *string `json:"approvalNumber"`

	// Defines whether the cardholder is present at the transaction. This value is optional, but recommended to be set. If this value is not set in the request, it will be automatically set based on the market code.
	CardHolderPresentCode string `json:"cardHolderPresentCode,omitempty"`

	// An optional clerk number for reference.
	ClerkNumber string `json:"clerkNumber,omitempty"`

	// Any value included in this section will override the corresponding value set in the triPOS.config
	Configuration *POSTEbtVoucherRequestConfigurationV1EbtVoucher `json:"configuration,omitempty"`

	// Invokes prompt for cardholder to enter card security code for manual keyed card entry.
	IsCscSupported string `json:"isCscSupported,omitempty"`

	// Specifies which lane to use.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// A user defined reference number.
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// An optional ticket number.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// The total transaction amount. This is the amount of funds to move on the card.
	// Required: true
	TransactionAmount *float64 `json:"transactionAmount"`

	// The voucher number to complete a foodstamp purchase.
	// Required: true
	VoucherNumber *string `json:"voucherNumber"`
}

// Validate validates this p o s t ebt voucher request v1 ebt voucher
func (m *POSTEbtVoucherRequestV1EbtVoucher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoucherNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) validateApprovalNumber(formats strfmt.Registry) error {

	if err := validate.Required("approvalNumber", "body", m.ApprovalNumber); err != nil {
		return err
	}

	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) validateTransactionAmount(formats strfmt.Registry) error {

	if err := validate.Required("transactionAmount", "body", m.TransactionAmount); err != nil {
		return err
	}

	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) validateVoucherNumber(formats strfmt.Registry) error {

	if err := validate.Required("voucherNumber", "body", m.VoucherNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p o s t ebt voucher request v1 ebt voucher based on the context it is used
func (m *POSTEbtVoucherRequestV1EbtVoucher) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTEbtVoucherRequestV1EbtVoucher) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *POSTEbtVoucherRequestV1EbtVoucher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTEbtVoucherRequestV1EbtVoucher) UnmarshalBinary(b []byte) error {
	var res POSTEbtVoucherRequestV1EbtVoucher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
