// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// POSTAutoRentalV1ForceCredit AutoRental
//
// swagger:model POST_AutoRental_v1_force_credit
type POSTAutoRentalV1ForceCredit struct {

	// Data related to any auto rental adjustments.
	AdjustmentData *POSTAutoRentalAdjustmentDataV1ForceCredit `json:"adjustmentData,omitempty"`

	// Agreement number.
	AgreementNumber string `json:"agreementNumber,omitempty"`

	// Customer Name.
	CustomerName string `json:"customerName,omitempty"`

	// Rate charged per day Visa/MC – Daily rate required for Corp T&E rate III.
	DailyRentalRate float64 `json:"dailyRentalRate,omitempty"`

	// The number of rental days. Value should be between 0 and 99. Set to 01 for no show rentals.
	Duration int32 `json:"duration,omitempty"`

	// If insurance is charged, the insurance amount should be provided.
	InsuranceCharges float64 `json:"insuranceCharges,omitempty"`

	// No show indicator. Indicates whether rental vehicle was reserved, but not actually rented.
	NoShowIndicator string `json:"noShowIndicator,omitempty"`

	// Data related to autorental pickup.
	PickupData *POSTAutoRentalPickupDataV1ForceCredit `json:"pickupData,omitempty"`

	// Data related to autorental return.
	ReturnData *POSTAutoRentalReturnDataV1ForceCredit `json:"returnData,omitempty"`

	// Classification of rental vehicle
	VehicleClassCode string `json:"vehicleClassCode,omitempty"`

	// Rate charged per week Visa/MC – Weekly rate required for Corp T&E rate III.
	WeeklyRentalRate float64 `json:"weeklyRentalRate,omitempty"`
}

// Validate validates this p o s t auto rental v1 force credit
func (m *POSTAutoRentalV1ForceCredit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTAutoRentalV1ForceCredit) validateAdjustmentData(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustmentData) { // not required
		return nil
	}

	if m.AdjustmentData != nil {
		if err := m.AdjustmentData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustmentData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adjustmentData")
			}
			return err
		}
	}

	return nil
}

func (m *POSTAutoRentalV1ForceCredit) validatePickupData(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupData) { // not required
		return nil
	}

	if m.PickupData != nil {
		if err := m.PickupData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupData")
			}
			return err
		}
	}

	return nil
}

func (m *POSTAutoRentalV1ForceCredit) validateReturnData(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnData) { // not required
		return nil
	}

	if m.ReturnData != nil {
		if err := m.ReturnData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this p o s t auto rental v1 force credit based on the context it is used
func (m *POSTAutoRentalV1ForceCredit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustmentData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTAutoRentalV1ForceCredit) contextValidateAdjustmentData(ctx context.Context, formats strfmt.Registry) error {

	if m.AdjustmentData != nil {
		if err := m.AdjustmentData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adjustmentData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adjustmentData")
			}
			return err
		}
	}

	return nil
}

func (m *POSTAutoRentalV1ForceCredit) contextValidatePickupData(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupData != nil {
		if err := m.PickupData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupData")
			}
			return err
		}
	}

	return nil
}

func (m *POSTAutoRentalV1ForceCredit) contextValidateReturnData(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnData != nil {
		if err := m.ReturnData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *POSTAutoRentalV1ForceCredit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTAutoRentalV1ForceCredit) UnmarshalBinary(b []byte) error {
	var res POSTAutoRentalV1ForceCredit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
