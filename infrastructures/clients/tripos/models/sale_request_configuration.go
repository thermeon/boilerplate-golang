// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SaleRequestConfiguration SaleRequestConfiguration
//
// swagger:model SaleRequestConfiguration
type SaleRequestConfiguration struct {

	// Use this parameter to allow debit <a href='https://triposcert.vantiv.com/api/help/kb/allowDebit.html'>more&raquo;</a>.
	AllowDebit bool `json:"allowDebit,omitempty"`

	// If set to true, partial approvals are allowed
	AllowPartialApprovals bool `json:"allowPartialApprovals,omitempty"`

	// Pass in either or both values. If a single value is passed then no AID option will be presented for cardholder to select and automatic AID selection will happen, assuming only one credit/debit AID is available on a card. In case, multiple credit AIDs or multiple debit AIDs are available on a card, then choice will be given to choose among the filtered list of credit/debit AIDs.<a href='https://triposcert.vantiv.com/api/help/kb/allowPaymentTypes.html'>more&raquo;</a>
	AllowedPaymentTypes []string `json:"allowedPaymentTypes"`

	// Use this section to specify cashback options for each request <a href='https://triposcert.vantiv.com/api/help/kb/cashbackOptions.html'>more&raquo;</a>.
	CashbackOptions *POSTCashbackOptionsV1Sale `json:"cashbackOptions,omitempty"`

	// If set to true, enables duplicate checking logic for the transaction at the host.
	CheckForDuplicateTransactions bool `json:"checkForDuplicateTransactions,omitempty"`

	// Use this parameter to confirm the sale original amount <a href='https://triposcert.vantiv.com/api/help/kb/confirmOriginalAmount.html'>more&raquo;</a>.
	ConfirmOriginalAmount bool `json:"confirmOriginalAmount,omitempty"`

	// Use this parameter to allow Vantiv & Valutec gift cards to be used.
	IsGiftSupported string `json:"isGiftSupported,omitempty"`

	// Use this parameter to allow manual entry of card account numbers on the PIN pad.
	IsManualEntryAllowed string `json:"isManualEntryAllowed,omitempty"`

	// The market code of the transaction.
	MarketCode string `json:"marketCode,omitempty"`

	// Use this parameter to allow Maestro Debit Aids to be processed as Debit if the CVM is Offline PIN
	ProcessUSMaestroDebitOffLinePinCvmAsDebit string `json:"processUSMaestroDebitOffLinePinCvmAsDebit,omitempty"`

	// Specifies how the signature prompt should be handled for the request. If a value is not provided, UseThreshold will be used. See <a href='https://triposcert.vantiv.com/api/help/kb/signaturePrompt.html'>Signature Prompt</a>.
	PromptForSignature string `json:"promptForSignature,omitempty"`

	// Override provisional amount used for QC transactions, which is $1.00 by default
	ProvisionalAmount string `json:"provisionalAmount,omitempty"`

	// Specifies the threshold value to use. If included, will override the value in the triPOS.config when promptForSignature is UseThreshold. See <a href='https://triposcert.vantiv.com/api/help/kb/signaturePrompt.html'>Signature Prompt</a>.
	ThresholdAmount float64 `json:"thresholdAmount,omitempty"`

	// If these tip options are sent in, they will override the tip options that are currently set in the triPOS.config. To disable tip, send this section up with empty values. To use the values from the triPOS.config, do not include this section in your request <a href='https://triposcert.vantiv.com/api/help/kb/tipOptions.html'>more&raquo;</a>.
	TipOptions *POSTTipOptionsV1Sale `json:"tipOptions,omitempty"`

	// Specifies the user input timeout.
	UserInputTimeout string `json:"userInputTimeout,omitempty"`
}

// Validate validates this sale request configuration
func (m *SaleRequestConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCashbackOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTipOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaleRequestConfiguration) validateCashbackOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.CashbackOptions) { // not required
		return nil
	}

	if m.CashbackOptions != nil {
		if err := m.CashbackOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashbackOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cashbackOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SaleRequestConfiguration) validateTipOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TipOptions) { // not required
		return nil
	}

	if m.TipOptions != nil {
		if err := m.TipOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tipOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tipOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sale request configuration based on the context it is used
func (m *SaleRequestConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCashbackOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTipOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaleRequestConfiguration) contextValidateCashbackOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.CashbackOptions != nil {
		if err := m.CashbackOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cashbackOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cashbackOptions")
			}
			return err
		}
	}

	return nil
}

func (m *SaleRequestConfiguration) contextValidateTipOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TipOptions != nil {
		if err := m.TipOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tipOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tipOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SaleRequestConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaleRequestConfiguration) UnmarshalBinary(b []byte) error {
	var res SaleRequestConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
