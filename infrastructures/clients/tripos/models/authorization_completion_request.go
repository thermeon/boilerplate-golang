// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationCompletionRequest AuthorizationCompletionRequest
//
// swagger:model AuthorizationCompletionRequest
type AuthorizationCompletionRequest struct {

	// The cardholder address information for the transaction.
	Address *POSTAddressV1AuthorizationTransactionIDCompletion `json:"address,omitempty"`

	// The auto rental parameters to be passed in for an auto rental transaction. <a href='https://triposcert.vantiv.com/api/help/kb/autorental.html'>more&raquo;</a>
	AutoRental *POSTAutoRentalV1AuthorizationTransactionIDCompletion `json:"autoRental,omitempty"`

	// Defines whether the cardholder is present at the transaction. This value is optional, but recommended to be set. If this value is not set in the request, it will be automatically set based on the market code.
	CardHolderPresentCode string `json:"cardHolderPresentCode,omitempty"`

	// An optional clerk number for reference.
	ClerkNumber string `json:"clerkNumber,omitempty"`

	// The commercial card customer code for the transaction. This is for Level II.
	CommercialCardCustomerCode string `json:"commercialCardCustomerCode,omitempty"`

	// Any value included in this section will override the corresponding value set in the triPOS.config
	Configuration *POSTAuthorizationCompletionRequestConfigurationV1AuthorizationTransactionIDCompletion `json:"configuration,omitempty"`

	// The convenience fee amount of the transaction. This amount is added to the TotalAmount before the cardholder is charged
	ConvenienceFeeAmount float64 `json:"convenienceFeeAmount,omitempty"`

	// Specifies which lane to use.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// The lodging parameters to be passed in for a lodging transaction. <a href='https://triposcert.vantiv.com/api/help/kb/lodging.html'>more&raquo;</a>
	Lodging *POSTLodgingTransactionCompletionV1AuthorizationTransactionIDCompletion `json:"lodging,omitempty"`

	// The card brand specific transaction ID that should be stored by the integrator.
	NetworkTransactionID string `json:"networkTransactionID,omitempty"`

	// Intent of why the credentials are being stored.
	RecurringPaymentType string `json:"recurringPaymentType,omitempty"`

	// A user defined reference number.
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// The amount of sales tax for the transaction. This is for Level II, submit amount for tax or 0.00 for tax-exempt.
	SalesTaxAmount float64 `json:"salesTaxAmount,omitempty"`

	// An optional shift id for reference.
	ShiftID string `json:"shiftId,omitempty"`

	// Specifies the type of transaction.
	SubmissionType string `json:"submissionType,omitempty"`

	// An optional ticket number.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// The tip amount of the transaction. This amount is added to the TotalAmount before the cardholder is charged.
	TipAmount float64 `json:"tipAmount,omitempty"`

	// The total transaction amount. This is the amount of funds to move on the card
	// Required: true
	TransactionAmount *float64 `json:"transactionAmount"`
}

// Validate validates this authorization completion request
func (m *AuthorizationCompletionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoRental(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLodging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationCompletionRequest) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) validateAutoRental(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoRental) { // not required
		return nil
	}

	if m.AutoRental != nil {
		if err := m.AutoRental.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRental")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationCompletionRequest) validateLodging(formats strfmt.Registry) error {
	if swag.IsZero(m.Lodging) { // not required
		return nil
	}

	if m.Lodging != nil {
		if err := m.Lodging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lodging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lodging")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) validateTransactionAmount(formats strfmt.Registry) error {

	if err := validate.Required("transactionAmount", "body", m.TransactionAmount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this authorization completion request based on the context it is used
func (m *AuthorizationCompletionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAutoRental(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLodging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationCompletionRequest) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) contextValidateAutoRental(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoRental != nil {
		if err := m.AutoRental.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRental")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *AuthorizationCompletionRequest) contextValidateLodging(ctx context.Context, formats strfmt.Registry) error {

	if m.Lodging != nil {
		if err := m.Lodging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lodging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lodging")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationCompletionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationCompletionRequest) UnmarshalBinary(b []byte) error {
	var res AuthorizationCompletionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
