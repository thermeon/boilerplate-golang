// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// POSTReceiptRequestV1Receipt ReceiptRequest
//
// swagger:model POST_ReceiptRequest_v1_receipt
type POSTReceiptRequestV1Receipt struct {

	// The card account number used in the transaction.
	// Required: true
	AccountNumber *string `json:"accountNumber"`

	// Approval number of the transaction.
	ApprovalNumber string `json:"approvalNumber,omitempty"`

	// The card logo of the card used in the transaction.
	// Required: true
	CardLogo *string `json:"cardLogo"`

	// Cashback amount the customer received.
	CashbackAmount float64 `json:"cashbackAmount,omitempty"`

	// Indicates whether the receipt is a Merchant Copy or a Customer Copy.
	CopyType string `json:"copyType,omitempty"`

	// The currency code used in the transaction.
	CurrencyCode string `json:"currencyCode,omitempty"`

	// A custom template that should be used instead of the default.
	CustomTemplate string `json:"customTemplate,omitempty"`

	// The EMV information of the EMV card used in the transaction.
	Emv *POSTReceiptEmvDtoV1Receipt `json:"emv,omitempty"`

	// Entry method used to enter card information, swipe, chip, etc.
	// Required: true
	EntryMode *string `json:"entryMode"`

	// The list of individual lines of text to be displayed at the bottom of the receipt.
	Footer []string `json:"footer"`

	// The list of individual lines of text to be displayed at the top of the receipt.
	Header []string `json:"header"`

	// The code returned by the transaction's processing host.
	HostResponseCode string `json:"hostResponseCode,omitempty"`

	// Indicates whether the transaction was approved.
	// Required: true
	IsApproved *bool `json:"isApproved"`

	// The lane ID.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// ID of the merchant.
	// Required: true
	MerchantID *string `json:"merchantId"`

	// Indicates whether the entered PIN was verified.
	PinVerified bool `json:"pinVerified,omitempty"`

	// The type of receipt.
	ReceiptType string `json:"receiptType,omitempty"`

	// The transaction's reference number.
	// Required: true
	ReferenceNumber *string `json:"referenceNumber"`

	// The subtotal amount of the transaction.
	// Required: true
	SubTotalAmount *float64 `json:"subTotalAmount"`

	// The ID of the terminal used in the transaction.
	// Required: true
	TerminalID *string `json:"terminalId"`

	// The tip amount.
	TipAmount float64 `json:"tipAmount,omitempty"`

	// The total amount of the transaction.
	TotalAmount float64 `json:"totalAmount,omitempty"`

	// Date and time of the transaction.
	// Required: true
	TransactionDateTime *string `json:"transactionDateTime"`

	// The ID of the transaction.
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this p o s t receipt request v1 receipt
func (m *POSTReceiptRequestV1Receipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("accountNumber", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateCardLogo(formats strfmt.Registry) error {

	if err := validate.Required("cardLogo", "body", m.CardLogo); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateEmv(formats strfmt.Registry) error {
	if swag.IsZero(m.Emv) { // not required
		return nil
	}

	if m.Emv != nil {
		if err := m.Emv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emv")
			}
			return err
		}
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateEntryMode(formats strfmt.Registry) error {

	if err := validate.Required("entryMode", "body", m.EntryMode); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateIsApproved(formats strfmt.Registry) error {

	if err := validate.Required("isApproved", "body", m.IsApproved); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateMerchantID(formats strfmt.Registry) error {

	if err := validate.Required("merchantId", "body", m.MerchantID); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateReferenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("referenceNumber", "body", m.ReferenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateSubTotalAmount(formats strfmt.Registry) error {

	if err := validate.Required("subTotalAmount", "body", m.SubTotalAmount); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateTerminalID(formats strfmt.Registry) error {

	if err := validate.Required("terminalId", "body", m.TerminalID); err != nil {
		return err
	}

	return nil
}

func (m *POSTReceiptRequestV1Receipt) validateTransactionDateTime(formats strfmt.Registry) error {

	if err := validate.Required("transactionDateTime", "body", m.TransactionDateTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p o s t receipt request v1 receipt based on the context it is used
func (m *POSTReceiptRequestV1Receipt) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTReceiptRequestV1Receipt) contextValidateEmv(ctx context.Context, formats strfmt.Registry) error {

	if m.Emv != nil {
		if err := m.Emv.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emv")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emv")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *POSTReceiptRequestV1Receipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTReceiptRequestV1Receipt) UnmarshalBinary(b []byte) error {
	var res POSTReceiptRequestV1Receipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
