// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// POSTCashbackOptionsV1Sale CashbackOptions
//
// swagger:model POST_CashbackOptions_v1_sale
type POSTCashbackOptionsV1Sale struct {

	// Configurable settings for allowing a cashback choice through manual entry.
	ManualEntry *POSTCashbackManualEntryV1Sale `json:"manualEntry,omitempty"`

	// The cashback amounts to display on the PIN pad's selection buttons (i.e. 5,10,20,50).
	SelectionAmounts string `json:"selectionAmounts,omitempty"`
}

// Validate validates this p o s t cashback options v1 sale
func (m *POSTCashbackOptionsV1Sale) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManualEntry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTCashbackOptionsV1Sale) validateManualEntry(formats strfmt.Registry) error {
	if swag.IsZero(m.ManualEntry) { // not required
		return nil
	}

	if m.ManualEntry != nil {
		if err := m.ManualEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manualEntry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manualEntry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this p o s t cashback options v1 sale based on the context it is used
func (m *POSTCashbackOptionsV1Sale) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManualEntry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTCashbackOptionsV1Sale) contextValidateManualEntry(ctx context.Context, formats strfmt.Registry) error {

	if m.ManualEntry != nil {
		if err := m.ManualEntry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manualEntry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manualEntry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *POSTCashbackOptionsV1Sale) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTCashbackOptionsV1Sale) UnmarshalBinary(b []byte) error {
	var res POSTCashbackOptionsV1Sale
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
