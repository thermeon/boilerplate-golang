// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental IncrementalAuthorizationRequest
//
// swagger:model POST_IncrementalAuthorizationRequest_v1_authorization_transactionId_incremental
type POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental struct {

	// The auto rental parameters to be passed in for an auto rental transaction. <a href='https://triposcert.vantiv.com/api/help/kb/autorental.html'>more&raquo;</a>
	AutoRental *POSTAutoRentalBasicV1AuthorizationTransactionIDIncremental `json:"autoRental,omitempty"`

	// Defines whether the cardholder is present at the transaction. This value is optional, but recommended to be set. If this value is not set in the request, it will be automatically set based on the market code.
	CardHolderPresentCode string `json:"cardHolderPresentCode,omitempty"`

	// An optional clerk number for reference.
	ClerkNumber string `json:"clerkNumber,omitempty"`

	// Applicable configuration values that can be set per request.
	Configuration *POSTTransactionIDRequestConfigurationV1AuthorizationTransactionIDIncremental `json:"configuration,omitempty"`

	// To retrieve Token in the transaction. <a href='https://triposcert.vantiv.com/api/help/kb/GetToken.html'>more&raquo;</a>
	GetToken string `json:"getToken,omitempty"`

	// Specifies which lane to use.
	// Required: true
	LaneID *int32 `json:"laneId"`

	// The lodging parameter to be passed in for a lodging transaction. <a href='https://triposcert.vantiv.com/api/help/kb/lodging.html'>more&raquo;</a>
	Lodging *POSTLodgingIncrementalAuthorizationV1AuthorizationTransactionIDIncremental `json:"lodging,omitempty"`

	// A user defined reference number.
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// An optional shift id for reference.
	ShiftID string `json:"shiftId,omitempty"`

	// An optional ticket number.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// The amount by which to increase the authorization amount.
	// Required: true
	TransactionAmount *float64 `json:"transactionAmount"`
}

// Validate validates this p o s t incremental authorization request v1 authorization transaction Id incremental
func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoRental(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLodging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) validateAutoRental(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoRental) { // not required
		return nil
	}

	if m.AutoRental != nil {
		if err := m.AutoRental.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRental")
			}
			return err
		}
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) validateConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) validateLaneID(formats strfmt.Registry) error {

	if err := validate.Required("laneId", "body", m.LaneID); err != nil {
		return err
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) validateLodging(formats strfmt.Registry) error {
	if swag.IsZero(m.Lodging) { // not required
		return nil
	}

	if m.Lodging != nil {
		if err := m.Lodging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lodging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lodging")
			}
			return err
		}
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) validateTransactionAmount(formats strfmt.Registry) error {

	if err := validate.Required("transactionAmount", "body", m.TransactionAmount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this p o s t incremental authorization request v1 authorization transaction Id incremental based on the context it is used
func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoRental(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLodging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) contextValidateAutoRental(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoRental != nil {
		if err := m.AutoRental.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoRental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoRental")
			}
			return err
		}
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) contextValidateConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.Configuration != nil {
		if err := m.Configuration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) contextValidateLodging(ctx context.Context, formats strfmt.Registry) error {

	if m.Lodging != nil {
		if err := m.Lodging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lodging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lodging")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental) UnmarshalBinary(b []byte) error {
	var res POSTIncrementalAuthorizationRequestV1AuthorizationTransactionIDIncremental
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
