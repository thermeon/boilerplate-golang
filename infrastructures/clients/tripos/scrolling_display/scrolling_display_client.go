// Code generated by go-swagger; DO NOT EDIT.

package scrolling_display

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scrolling display API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scrolling display API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Postv1scrollingDisplay(params *Postv1scrollingDisplayParams, opts ...ClientOption) (*Postv1scrollingDisplayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Postv1scrollingDisplay displays an item on an area of the p i n pad screen that scrolls as items are added

  Use the scrolling display endpoint to repeatedly add items to a scroll area of the PIN pad screen while displaying the subtotal, tax, and total of the transaction. This endpoint returns an HTTP status code of 200 if the text was successfully displayed on the PIN pad. See <a href='https://triposcert.vantiv.com/api/help/kb/scrollingdisplay.html'>scrolling display documentation</a> fore more information.
*/
func (a *Client) Postv1scrollingDisplay(params *Postv1scrollingDisplayParams, opts ...ClientOption) (*Postv1scrollingDisplayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1scrollingDisplayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1scrollingDisplay",
		Method:             "POST",
		PathPattern:        "/api/v1/scrollingDisplay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1scrollingDisplayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1scrollingDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1scrollingDisplay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
