// Code generated by go-swagger; DO NOT EDIT.

package display

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new display API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for display API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Postv1display(params *Postv1displayParams, opts ...ClientOption) (*Postv1displayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Postv1display displays a text on the p i n pad

  Use the display endpoint to display a text on the PIN pad. This endpoint returns an HTTP status code of 200 if the text was successfully displayed on the PIN pad. See <a href='https://triposcert.vantiv.com/api/help/kb/display.html'>display documentation</a> fore more information.
*/
func (a *Client) Postv1display(params *Postv1displayParams, opts ...ClientOption) (*Postv1displayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1displayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1display",
		Method:             "POST",
		PathPattern:        "/api/v1/display",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1displayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1displayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1display: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
