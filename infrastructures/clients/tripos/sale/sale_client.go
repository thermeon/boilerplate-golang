// Code generated by go-swagger; DO NOT EDIT.

package sale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sale API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sale API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Postv1sale(params *Postv1saleParams, opts ...ClientOption) (*Postv1saleOK, error)

	Postv1salepaymentAccountID(params *Postv1salepaymentAccountIDParams, opts ...ClientOption) (*Postv1salepaymentAccountIDOK, error)

	Postv1saletoken(params *Postv1saletokenParams, opts ...ClientOption) (*Postv1saletokenOK, error)

	Postv1saletransactionIdreturnpaymentType(params *Postv1saletransactionIdreturnpaymentTypeParams, opts ...ClientOption) (*Postv1saletransactionIdreturnpaymentTypeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Postv1sale creates a new card sale based on the passed in amounts

  Review this document for information on requiring the PIN pad to prompt for the cardholder to accept the <a href='https://triposcert.vantiv.com/api/help/kb/convenienceFeeAmount.html'>convenienceFeeAmount.</a> Additionally, this endpoint supports QuickChip/PreRead functionality. See <a href='https://triposcert.vantiv.com/api/help/kb/cloud/QuickChipConfiguration.html'> QuickChip/PreRead documentation</a> for more information.
*/
func (a *Client) Postv1sale(params *Postv1saleParams, opts ...ClientOption) (*Postv1saleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1saleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1sale",
		Method:             "POST",
		PathPattern:        "/api/v1/sale",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1saleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1saleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1sale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1salepaymentAccountID creates a new payment account sale based on the passed in amounts
*/
func (a *Client) Postv1salepaymentAccountID(params *Postv1salepaymentAccountIDParams, opts ...ClientOption) (*Postv1salepaymentAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1salepaymentAccountIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1salepaymentAccountId",
		Method:             "POST",
		PathPattern:        "/api/v1/sale/{paymentAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1salepaymentAccountIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1salepaymentAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1salepaymentAccountId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1saletoken creates a new card sale using a token based on the passed in amounts

  See <a href='https://triposcert.vantiv.com/api/help/kb/omniToken.html'>OmniToken documentation</a> for more information.
*/
func (a *Client) Postv1saletoken(params *Postv1saletokenParams, opts ...ClientOption) (*Postv1saletokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1saletokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1saletoken",
		Method:             "POST",
		PathPattern:        "/api/v1/sale/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1saletokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1saletokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1saletoken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Postv1saletransactionIdreturnpaymentType deprecateds use v1 return transaction Id payment type instead
*/
func (a *Client) Postv1saletransactionIdreturnpaymentType(params *Postv1saletransactionIdreturnpaymentTypeParams, opts ...ClientOption) (*Postv1saletransactionIdreturnpaymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostv1saletransactionIdreturnpaymentTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postv1saletransactionIdreturnpaymentType",
		Method:             "POST",
		PathPattern:        "/api/v1/sale/{transactionId}/return/{paymentType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &Postv1saletransactionIdreturnpaymentTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Postv1saletransactionIdreturnpaymentTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postv1saletransactionIdreturnpaymentType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
